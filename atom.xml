<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>云烟成雨</title>
  
  
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://yoursite.com/"/>
  <updated>2020-05-12T07:00:49.510Z</updated>
  <id>http://yoursite.com/</id>
  
  <author>
    <name>云烟成雨</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>js初级用法</title>
    <link href="http://yoursite.com/2020/05/12/js%E5%88%9D%E7%BA%A7%E7%94%A8%E6%B3%95/"/>
    <id>http://yoursite.com/2020/05/12/js%E5%88%9D%E7%BA%A7%E7%94%A8%E6%B3%95/</id>
    <published>2020-05-12T07:00:06.961Z</published>
    <updated>2020-05-12T07:00:49.510Z</updated>
    
    <content type="html"><![CDATA[<h1 id="第一章-js基础语法"><a href="#第一章-js基础语法" class="headerlink" title="第一章    js基础语法"></a>第一章    js基础语法</h1><a id="more"></a><h3 id="一-学习方法"><a href="#一-学习方法" class="headerlink" title="一.学习方法"></a>一.学习方法</h3><p>①记        固定语法</p><p>②思 试   实现逻辑</p><p>③总结      不可以的  可以的</p><p>④敲 练</p><h3 id="二-js定义"><a href="#二-js定义" class="headerlink" title="二.js定义"></a>二.js定义</h3><p>js是基于对象和事件的编程语言</p><h3 id="三-特征"><a href="#三-特征" class="headerlink" title="三.特征"></a>三.特征</h3><p>1.交互（人机交互，机器交互，数据交互）</p><p>2.解释性语言 js PHP  边解释边执行  跨平台性好     速度稍慢</p><p>  编译性语言  C C++  先通篇翻译成文件，再执行文件  跨平台性不太好  </p><p>速度快</p><h3 id="四-组成部分"><a href="#四-组成部分" class="headerlink" title="四.组成部分"></a>四.组成部分</h3><p>1.ECMAscript  语法标准</p><p>2.BOM 浏览器对象模型</p><p>3.DOM 文档对象模型</p><h3 id="五-js放置的位置"><a href="#五-js放置的位置" class="headerlink" title="五.js放置的位置"></a>五.js放置的位置</h3><h5 id="1-行内js"><a href="#1-行内js" class="headerlink" title="1.行内js"></a>1.行内js</h5><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;button onclick&#x3D;&quot;alert(&#39;行内js&#39;)&quot;&gt;</span><br></pre></td></tr></table></figure><p>①onclick 点击事件   单击鼠标左键触发</p><p>②alert(“警示语”)  弹出警示框，只有一个确定按钮，阻塞进程</p><p>③单双引号交替使用</p><h5 id="2-head内的js"><a href="#2-head内的js" class="headerlink" title="2. head内的js"></a>2. head内的js</h5><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">window.onload &#x3D; function()&#123;</span><br><span class="line">&#x2F;&#x2F; 1.获取节点并检测</span><br><span class="line">   var btn2 &#x3D; document.getElementById(&quot;btn2&quot;);  </span><br><span class="line">&#x2F;&#x2F; console.log(btn2);</span><br><span class="line">   btn2.onclick &#x3D; function()&#123;</span><br><span class="line">  alert(&quot;head内的js&quot;);</span><br><span class="line">   &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>①window.onload  = function(){}  加载函数，当把js写在head内且要获取节点时一定要写加载函数</p><p>   window 窗口       </p><p>   onload加载事件  </p><p>​    =  赋值   </p><p> ②function () {}  函数   function是声明函数的关键字   ()里面放参数   {}里放js执行代码</p><p>③var  声明变量的关键字  后面跟的是变量名</p><p>④document.getElementById(“id名字”)  从文档中通过id名来获取节点 只获取1个   id有唯一性</p><p>⑤驼峰命名法  一个长单词里有多个短的单词拼在一起，每个短单词的首字母大写    js严格区分大小写</p><p>⑥console.log(要打印的内容或变量名)   在控制台打印，用于测试</p><h5 id="3-body内的js"><a href="#3-body内的js" class="headerlink" title="3.body内的js"></a>3.body内的js</h5><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">&lt;!-- body内的js --&gt;</span><br><span class="line">&lt;button id&#x3D;&quot;btn3&quot;&gt;</span><br><span class="line">body内的js</span><br><span class="line">&lt;&#x2F;button&gt;</span><br><span class="line"></span><br><span class="line">&lt;script type&#x3D;&quot;text&#x2F;javascript&quot;&gt;</span><br><span class="line">&#x2F;&#x2F; 1.获取节点并检测</span><br><span class="line">var btn3 &#x3D; document.getElementById(&quot;btn3&quot;);</span><br><span class="line">&#x2F;&#x2F; console.log(btn3);</span><br><span class="line">&#x2F;&#x2F; 2.给按钮加点击事件</span><br><span class="line">btn3.onclick &#x3D; function()&#123;</span><br><span class="line">alert(&quot;body内的js&quot;);</span><br><span class="line">&#125;</span><br><span class="line">&lt;&#x2F;script&gt;</span><br></pre></td></tr></table></figure><p>①把js放在要控制的标签下面</p><h5 id="4-外部js"><a href="#4-外部js" class="headerlink" title="4.外部js"></a>4.外部js</h5><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&lt;button id&#x3D;&quot;btn4&quot;&gt;</span><br><span class="line">外部js</span><br><span class="line">&lt;&#x2F;button&gt;</span><br><span class="line">&lt;!-- 外部js --&gt;</span><br><span class="line">&lt;script src&#x3D;&quot;js&#x2F;wai.js&quot;&gt;&lt;&#x2F;script&gt;</span><br></pre></td></tr></table></figure><h3 id="六、变量"><a href="#六、变量" class="headerlink" title="六、变量"></a>六、变量</h3><h5 id="1-定义"><a href="#1-定义" class="headerlink" title="1.定义"></a>1.定义</h5><p>用来存储信息的容器</p><h5 id="2-声明和赋值"><a href="#2-声明和赋值" class="headerlink" title="2.声明和赋值"></a>2.声明和赋值</h5><p>用var来声明     赋值可以声明同时赋值  也可以先声明后赋值    </p><h5 id="3-变量名命名规范"><a href="#3-变量名命名规范" class="headerlink" title="3.变量名命名规范"></a>3.变量名命名规范</h5><p>由数字 字母 $ _ 组成，不能数字开头，不能用关键字和保留字，注意大小写</p><h5 id="4-作用域（在哪个范围内有用）"><a href="#4-作用域（在哪个范围内有用）" class="headerlink" title="4.作用域（在哪个范围内有用）"></a>4.作用域（在哪个范围内有用）</h5><p>①全局变量   在全局内有用                 声明在函数外      同一个文档内不能重名</p><p>②局部变量    在声明的函数内有用    ………………..内       ………………….可以….</p><p>作用域取决于声明的位置</p><h3 id="七、数据类型"><a href="#七、数据类型" class="headerlink" title="七、数据类型"></a>七、数据类型</h3><h5 id="1-分类："><a href="#1-分类：" class="headerlink" title="1.分类："></a>1.分类：</h5><p>（1）值类型（原始类型） </p><p>①undefined   声明未赋值   是变量的初始值</p><p>②null              空                   给对象赋值</p><p>③number       数字               整数和浮点数/小数   NaN特殊的number</p><p>④boolean       布尔型           true真   false 假</p><p>⑤string           字符串            用引号””  ‘’ 引起来的内容</p><p> （2） 引用类型：function函数   object对象</p><h5 id="2-检测数据类型"><a href="#2-检测数据类型" class="headerlink" title="2.检测数据类型"></a>2.检测数据类型</h5><p>用typeof()方法检测</p><p>检测结果有6种   ： undefined    object   number   boolean  string   function</p><h5 id="3-数据类型转换"><a href="#3-数据类型转换" class="headerlink" title="3.数据类型转换"></a>3.数据类型转换</h5><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">①parseInt() 转换为整数</span><br><span class="line">总结：undefined，null，true,false,字母开头的字符串 转换结果NaN，数字和数字开头的字符串，取整数部分</span><br><span class="line"></span><br><span class="line">②parseFloat() 转换为浮点数</span><br><span class="line">总结： 转换结果NaN同上 数字和数字开头的字符串，取整数和小数部分，有多个点的只有第一个是小数点，后面的是字符串会剪掉</span><br><span class="line"></span><br><span class="line">③Number() 转换为数字</span><br><span class="line">总结：undefined和带字母的字符串，转换结果是NaN</span><br><span class="line">null，false,空字符串，空格字符串，0转换结果是0</span><br><span class="line">true，1转换结果是1</span><br><span class="line">数字转换结果是本身，纯数字的字符串转换结果是引号里面的数字</span><br><span class="line"></span><br><span class="line">④Boolean() 转换为布尔值</span><br><span class="line">总结：undefined，null,数字0，false，空字符串 转换结果是false,其余是true</span><br><span class="line"></span><br><span class="line">⑤String()  转换为字符串</span><br><span class="line">总结：给（）里的内容加引号</span><br><span class="line"></span><br><span class="line">弱类型转换：浏览器自动的转换</span><br></pre></td></tr></table></figure><h3 id="八、运算符"><a href="#八、运算符" class="headerlink" title="八、运算符"></a>八、运算符</h3><h4 id="（一）算术运算符"><a href="#（一）算术运算符" class="headerlink" title="（一）算术运算符"></a>（一）算术运算符</h4><h5 id="取余-自加-–-自减"><a href="#取余-自加-–-自减" class="headerlink" title="+   -   *   /    %取余      ++ 自加      –  自减    +=     -="></a>+   -   *   /    %取余      ++ 自加      –  自减    +=     -=</h5><p>1.加号两边有一边是字符串，加号作为连接符使用，其余做加法计算</p><p>2.减乘除的用法和算术用法一样，结果是计算的数字或者是NaN</p><p>3.%取余/模    一般用于判断奇偶性   例子：a%2 == 0 偶数   a%2 == 1 奇数 </p><p>4.++   –   等价于+1或-1   ++在前 先自加 后赋值    ++ 在后  先赋值  后自加</p><p>5.+=  例子：var b = 8；console.log(b += 2)；//10   b += 2等价于  b = b+2</p><h4 id="（二）赋值运算符"><a href="#（二）赋值运算符" class="headerlink" title="（二）赋值运算符"></a>（二）赋值运算符</h4><h5 id="把右边赋值给左边-优先级最低（最后做赋值运算）"><a href="#把右边赋值给左边-优先级最低（最后做赋值运算）" class="headerlink" title="=     把右边赋值给左边     优先级最低（最后做赋值运算）"></a>=     把右边赋值给左边     优先级最低（最后做赋值运算）</h5><h4 id="（三）比较运算符"><a href="#（三）比较运算符" class="headerlink" title="（三）比较运算符"></a>（三）比较运算符</h4><h5 id="gt-lt-gt-lt-等于-完全等于-不等于-全不等于-结果是布尔值"><a href="#gt-lt-gt-lt-等于-完全等于-不等于-全不等于-结果是布尔值" class="headerlink" title="&gt;   &lt;   &gt;=   &lt;=   ==等于   === 完全等于    !=   不等于    !==  全不等于     结果是布尔值"></a>&gt;   &lt;   &gt;=   &lt;=   ==等于   === 完全等于    !=   不等于    !==  全不等于     结果是布尔值</h5><p>1.==只比较值 ，不管类型，值相同就是true       ===   值和类型都相同才是true</p><p>2.!= 和 == 相反    !== 和 ===相反</p><h4 id="（四）逻辑运算符"><a href="#（四）逻辑运算符" class="headerlink" title="（四）逻辑运算符"></a>（四）逻辑运算符</h4><h5 id="amp-amp-并且-或者-非-取反"><a href="#amp-amp-并且-或者-非-取反" class="headerlink" title="&amp;&amp; 并且    || 或者     ! 非/取反"></a>&amp;&amp; 并且    || 或者     ! 非/取反</h5><p>1、&amp;&amp;左右两边都为真，才是真，一边为假都为假</p><p>2、||  左右两边都为假，才是假，一边为真都为真</p><p>3、!强制转换为布尔值  再取反</p><h4 id="五-条件运算符"><a href="#五-条件运算符" class="headerlink" title="(五)  条件运算符"></a>(五)  条件运算符</h4><h5 id="条件-条件为真执行的代码-条件为假执行的代码"><a href="#条件-条件为真执行的代码-条件为假执行的代码" class="headerlink" title="条件  ?  条件为真执行的代码   :  条件为假执行的代码"></a>条件  ?  条件为真执行的代码   :  条件为假执行的代码</h5><h4 id="（六）运算符的优先级顺序"><a href="#（六）运算符的优先级顺序" class="headerlink" title="（六）运算符的优先级顺序"></a>（六）运算符的优先级顺序</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">1.  () </span><br><span class="line">      2.  ++  --  !</span><br><span class="line">      3.  * &#x2F; %</span><br><span class="line">      4.  +  -  </span><br><span class="line">      5.  比较</span><br><span class="line">      6.  &amp;&amp;</span><br><span class="line">      7.  ||</span><br><span class="line">      8.  ?:</span><br><span class="line">      9.  &#x3D;</span><br></pre></td></tr></table></figure><h1 id="第二章-js选择结构"><a href="#第二章-js选择结构" class="headerlink" title="第二章  js选择结构"></a>第二章  js选择结构</h1><h3 id="一-程序"><a href="#一-程序" class="headerlink" title="一.程序"></a>一.程序</h3><p>有序的指令集合</p><h3 id="二-程序结构分类"><a href="#二-程序结构分类" class="headerlink" title="二.程序结构分类"></a>二.程序结构分类</h3><ol><li>顺序结构      从上往下 依次执行</li><li>选择结构      if     switch</li><li>循环结构      for   for…in     while    do…while   for…of</li></ol><h3 id="三、选择结构"><a href="#三、选择结构" class="headerlink" title="三、选择结构"></a>三、选择结构</h3><h5 id="1-二选一的结构"><a href="#1-二选一的结构" class="headerlink" title="1.二选一的结构"></a>1.二选一的结构</h5><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">if(条件判断)&#123;</span><br><span class="line">条件判断为真 执行的代码</span><br><span class="line">&#125;else&#123;</span><br><span class="line">条件判断为假 执行的代码</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">条件判断?条件判断为真 执行的代码:条件判断为假 执行的代码</span><br><span class="line">条件运算符&#x2F;三元运算符&#x2F;三目运算符，主要用于改写简单的二选一结构</span><br></pre></td></tr></table></figure><h5 id="2-多选一"><a href="#2-多选一" class="headerlink" title="2.多选一"></a>2.多选一</h5><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">if(条件判断1)&#123;</span><br><span class="line">1为真 执行的代码</span><br><span class="line">&#125;else if(条件判断2)&#123;</span><br><span class="line">2为真 执行的代码</span><br><span class="line">&#125;else if(条件判断3)&#123;</span><br><span class="line">3为真 执行的代码</span><br><span class="line">&#125;</span><br><span class="line">......</span><br><span class="line">else&#123;</span><br><span class="line">条件判断为假 执行的代码</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>if有且仅有一个，else  if  根据需要有1-N个，else 可以写也可以省略，写的时候有且仅有1个，省略表示不满足所有条件的时候不执行任何操作</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">switch(表达式)&#123;</span><br><span class="line">case 常量1:</span><br><span class="line">js语句1;</span><br><span class="line">break;</span><br><span class="line">.....</span><br><span class="line">default:</span><br><span class="line">以上条件都不满足时执行的语句</span><br><span class="line">break;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>用于改写多重if判断，更加简洁明了，switch是关键字，case可以写多个，default写1个或省略</p><h1 id="第三章-循环结构"><a href="#第三章-循环结构" class="headerlink" title="第三章  循环结构"></a>第三章  循环结构</h1><h3 id="1-循环定义"><a href="#1-循环定义" class="headerlink" title="1.循环定义"></a>1.循环定义</h3><p>满足条件的情况下，重复执行</p><h3 id="2-for基本语法："><a href="#2-for基本语法：" class="headerlink" title="2.for基本语法："></a>2.for基本语法：</h3><p>for（开始条件；判断条件；迭代条件）{<br>    循环操作的代码<br>}</p><p>开始条件：从哪里开始<br>判断条件：到哪里结束<br>迭代条件：下一次从哪里开始</p><h3 id="3-for…in"><a href="#3-for…in" class="headerlink" title="3.for…in"></a>3.for…in</h3><p>①常用于循环数组（for或者for…in） 和 对象(for…in)</p><p>②语法结构：<br>for(变量 in 对象名/数组名){<br>   循环操作的代码<br>}</p><h3 id="4-while语法结构"><a href="#4-while语法结构" class="headerlink" title="4.while语法结构"></a>4.while语法结构</h3><p>初始条件；<br>while（判断条件）{<br>    循环操作的代码；<br>    迭代条件<br>}</p><h3 id="5-do…while语法结构"><a href="#5-do…while语法结构" class="headerlink" title="5.do…while语法结构"></a>5.do…while语法结构</h3><p>初始条件；<br>do{<br>   循环操作的代码；<br>   迭代条件<br>}<br>while（判断条件）<br>特点：先执行后判断</p><h3 id="6-跳转语句"><a href="#6-跳转语句" class="headerlink" title="6.跳转语句"></a>6.跳转语句</h3><h5 id="①-break"><a href="#①-break" class="headerlink" title="①.break"></a>①.break</h5><p>用于结束循环  break后的语句不再执行  可用于结束所有循环、switch、函数</p><h5 id="②-continue"><a href="#②-continue" class="headerlink" title="②.continue"></a>②.continue</h5><p>用于跳出本次循环，后面的继续，只用于循环</p><h3 id="7-多重循环："><a href="#7-多重循环：" class="headerlink" title="7.多重循环："></a>7.多重循环：</h3><p>循环里面套循环，很耗性能 一般嵌套不超过3层 多用双重循环  各种循环可以相互嵌套</p><p>外循环的变量走一次，内循环的变量要从头到尾走一遍</p><h3 id="8-自定义属性-—选项卡效果"><a href="#8-自定义属性-—选项卡效果" class="headerlink" title="8.自定义属性 —选项卡效果"></a>8.自定义属性 —选项卡效果</h3><p>循环内嵌套事件如点击事件等，当事件触发时，循环已经结束，循环变量的值是最后一个值，要实现点哪个就执行哪个的效果，可以用加自定义属性的方法如：<br>for(var i=0;i&lt;imgs.length;i++){<br>    imgs[i].index = i; //自定义属性index  将i的值依次存入其中，要用就用this.index 来获取<br>    。。。执行的操作<br>}</p><h1 id="第四章-内置对象"><a href="#第四章-内置对象" class="headerlink" title="第四章  内置对象"></a>第四章  内置对象</h1><h2 id="对象"><a href="#对象" class="headerlink" title="对象"></a>对象</h2><p>1.js中万物皆对象 – 可以用属性和方法来描述所有的事物，即将其封装成对象</p><p>2.对象本质是数据类型中的引用类型  </p><p>3.对象有属性和方法  属性– 特征  方法–能做什么</p><p>4.对象名.属性名    对象名.方法名（）</p><p>5.对象分为内置对象和自定义对象</p><p>6.常用内置对象：Array 数组  Date 日期对象  Math 算术任务  String字符串对象</p><h2 id="数组"><a href="#数组" class="headerlink" title="数组"></a>数组</h2><h5 id="1-定义：1个变量名里存储一堆元素-节省空间"><a href="#1-定义：1个变量名里存储一堆元素-节省空间" class="headerlink" title="1.定义：1个变量名里存储一堆元素  节省空间"></a>1.定义：1个变量名里存储一堆元素  节省空间</h5><h5 id="2-创建数组的方法："><a href="#2-创建数组的方法：" class="headerlink" title="2.创建数组的方法："></a>2.创建数组的方法：</h5><p>① var arr = new Array()   构造函数创建的的方法<br>new 是创建对象的关键字  后面跟构造函数<br>Array（）数组对象的构造函数</p><p>② var arr2 = [ ]  字面量的方法创建对象</p><p>②是①语法糖  语法糖指更简洁更方便</p><h5 id="3-数组赋值"><a href="#3-数组赋值" class="headerlink" title="3.数组赋值"></a>3.数组赋值</h5><p> 可以声明时同时赋值 如：var arr=[1,2,3],</p><p>也可以先声明后赋值 如：var week = [];week[0]=”星期一”</p><h5 id="3-密集数组和稀疏数组"><a href="#3-密集数组和稀疏数组" class="headerlink" title="3.密集数组和稀疏数组"></a>3.密集数组和稀疏数组</h5><p>元素连续的为密集数组，读取每个元素用for循环和for…in循环，结果一样</p><p>元素之间有间隙的为稀疏数组，用for循环会读取每个元素，empty元素默认值为undefined，用for…in循环，只读取有内容的元素，empty元素直接跳过。</p><h5 id="4-读取-查看-数组用："><a href="#4-读取-查看-数组用：" class="headerlink" title="4.读取/查看 数组用："></a>4.读取/查看 数组用：</h5><p>数组名[下标/索引]  var arr=[“a”,8,”b”];  arr[2]–”b”索引从0开始</p><h5 id="5-数组的长度属性-数组名-length-从1开始，可以读取，也可以改写"><a href="#5-数组的长度属性-数组名-length-从1开始，可以读取，也可以改写" class="headerlink" title="5.数组的长度属性  数组名.length  从1开始，可以读取，也可以改写"></a>5.数组的长度属性  数组名.length  从1开始，可以读取，也可以改写</h5><h5 id="6-删除数组的方法"><a href="#6-删除数组的方法" class="headerlink" title="6.删除数组的方法"></a>6.删除数组的方法</h5><p>①删除末尾      数组名.pop()      删除1个<br>②删除开头的    数组名.shift()      删除1个<br>③删除任意位置  数组名.splice(开始删除的位置，删除的个数)  可以删除任意位置的多个，删除的个数不写，默认删除到末尾，及数组.length-1的位置</p><h5 id="7-增加数组元素的方法"><a href="#7-增加数组元素的方法" class="headerlink" title="7.增加数组元素的方法"></a>7.增加数组元素的方法</h5><p>①末尾增加    数组名.push()       增加1个或多个 即（）里可以写1个或多个元素，中间用逗号隔开<br>②开头增加    数组名.unshift()    增加1个或多个 即（）里可以写1个或多个元素，中间用逗号隔开<br>③任意位置增加  数组名.splice(开始增加的位置，0，要增加的内容)  可以在任意位置增加1个或多个</p><h5 id="8-排序"><a href="#8-排序" class="headerlink" title="8.排序"></a>8.排序</h5><p>①字母排序          数组名.sort()<br>②纯数字的数组排序    数组名.sort(function(a,b){ return a-b} ) 从小到大  升序 排序<br>            数组名.sort(function(a,b){ return b-a} ) 从大到小  降序 排序</p><h5 id="9-改写数组内的元素"><a href="#9-改写数组内的元素" class="headerlink" title="9.改写数组内的元素"></a>9.改写数组内的元素</h5><p>①给要改写的位置/索引，重新赋值，主要用改写少量的元素<br>②用splice的方法改写，用于改连续的元素</p><h5 id="二、不改变原数组的方法"><a href="#二、不改变原数组的方法" class="headerlink" title="二、不改变原数组的方法"></a>二、不改变原数组的方法</h5><p>1.数组名.join(“分隔符”)   将数组里的每个元素用分隔符连接变成一个字符串</p><p>2.数组名.toString()        ………………..逗号连接。。。。。。。。，不能自定义分隔符</p><p>3.数组1名.concat（数组2名,数组3名。。。。）  合并数组中的元素，原数组不改变，注意合并时数组名的顺序，影响合并后元素的位置</p><p>4.数组名.indexOf(要查找的内容，从哪个索引开始找)；从哪个索引开始找可以省略，省略后默认从0的位置开始找，没有找到返回-1，查找 === 的严格搜索</p><p>5.数组名.lastIndexOf(要查找的内容，从哪个索引开始找)；从后往前找（从右往左找）</p><p>6.数组名.slice(开始的索引，结束的索引)，作用：截取这两个索引之间的元素，包前不包后，变成一个新数组，原数组不改变</p><h2 id="Math对象"><a href="#Math对象" class="headerlink" title="Math对象"></a>Math对象</h2><h5 id="1-定义："><a href="#1-定义：" class="headerlink" title="1.定义："></a>1.定义：</h5><p>处理数学任务，无构造函数，使用直接写 Math.属性名/方法名（）</p><h5 id="2-属性：Math-PI-圆周率-还可以处理对数，平方等"><a href="#2-属性：Math-PI-圆周率-还可以处理对数，平方等" class="headerlink" title="2.属性：Math.PI 圆周率  还可以处理对数，平方等"></a>2.属性：Math.PI 圆周率  还可以处理对数，平方等</h5><h5 id="3-掌握的方法："><a href="#3-掌握的方法：" class="headerlink" title="3.掌握的方法："></a>3.掌握的方法：</h5><p>①Math.abs(x)  x的绝对值  Math.abs(undefined)//NaN  ..(null)//0 ..(true)//1 …(false)//0 …(“-3”)//3</p><p>②Math.ceil(x) 上舍入   向上取整</p><p>③Math.floor(x) 下舍入  向下取整</p><p>④Math.max(a,b,c,d,e,……) 最大值</p><p>⑤。。.min………………….小</p><p>⑥Math.pow(x,y) x的y次幂</p><p>⑦Math.random() 返回0-1之间的随机数  取不到0，也取不到1</p><p>⑧Math.round(x) 四舍五入  取整</p><p>总结：Math方法的参数 可以传数字类型，其它类型的浏览器会先做Number（其它类型），规律同Number()</p><h2 id="Date对象"><a href="#Date对象" class="headerlink" title="Date对象"></a>Date对象</h2><h5 id="1-定义：处理日期"><a href="#1-定义：处理日期" class="headerlink" title="1.定义：处理日期"></a>1.定义：处理日期</h5><h5 id="2-创建的方法"><a href="#2-创建的方法" class="headerlink" title="2.创建的方法"></a>2.创建的方法</h5><p>①不传参：var today = new Date() 当前时间</p><p>②传参：var zhi= new Date(“月份 号数，年，时：分：秒”) 指定时间时间</p><h5 id="3-获取具体的。。。方法-var-today-new-Date"><a href="#3-获取具体的。。。方法-var-today-new-Date" class="headerlink" title="3.获取具体的。。。方法  var today = new Date()"></a>3.获取具体的。。。方法  var today = new Date()</h5><p>①年：        today.getFullYear()    4位数<br>②月：        …..               取值0-11<br>③日：                       取值1-31<br>④时：                       24小时制<br>⑤分：                       取值0-59<br>⑥秒：                       取值0-59<br>⑦星期：                   取值0-6,0是星期天，1是星期一 以此类推<br>⑧毫秒数：                   1s=1000ms</p><h5 id="4-innerHTML-往节点内写入内容-语法："><a href="#4-innerHTML-往节点内写入内容-语法：" class="headerlink" title="4.innerHTML 往节点内写入内容  语法："></a>4.innerHTML 往节点内写入内容  语法：</h5><p>父节点.innerHTML = “新内容”   新内容可以是文本，标签，变量等等</p><h5 id="5-开定时器的方法"><a href="#5-开定时器的方法" class="headerlink" title="5.开定时器的方法"></a>5.开定时器的方法</h5><p>setTimeout（函数，等待毫秒数）  等待多长时间后执行一次函数</p><p>setInterval（函数，间隔的毫秒数） 每隔多长时间执行一次函数</p><h5 id="6-关定时器的方法"><a href="#6-关定时器的方法" class="headerlink" title="6.关定时器的方法"></a>6.关定时器的方法</h5><p>clearTimeout（开的那个定时器的Id）   关掉用setTimeout开的定时器</p><p>clearInterval（开的那个定时器的Id）  关掉用setInterval开的定时器</p><h2 id="string对象"><a href="#string对象" class="headerlink" title="string对象"></a>string对象</h2><p>1.定义：处理文本 （不包括图片，音频视频等）</p><p>2.创建字符串对象，可以直接声明并赋值 如 var str = “fd我”</p><p>3.直接声明的字符串，浏览器会自动改为 new String（”内容”）</p><p>4.字符串的length只能读取，改写无效，字符串具有稳定性</p><p>5.字符串名.toLowerCase();改为小写<br>  。。。。.toUpperCase();。。大<br>大小写只针对字母，整体改，不改变原字符串</p><p>6.字符串名.charAt（索引号）；查找指定位置的字符，返回一个字符，如果这个索引号&gt;=字符串的length，没有字符返回</p><p>7.字符串名.indexOf（“要找的字符/字符串”，从哪个位置开始找）<br>找到了就返回字符或字符串首位的索引，没找到返回-1，第2个参数可以省略，省略后默认从0开始找</p><p>8.字符串名.substring(索引1，索引2)  截取索引1和索引2之间的字符串，包前不包后 索引2 &gt;字符串长度，默认到字符串.length</p><h5 id="表单验证"><a href="#表单验证" class="headerlink" title="表单验证"></a>表单验证</h5><p>1.isNaN（x）</p><p>判断x是不是一个非数字，返回的结果是布尔值</p><p>当x是数字、纯数字的字符串、布尔值、null 时isNaN（x）返回结果是false，其余都是true</p><p>2.失去焦点事件 onblur<br>  获取。。。。 onfocus</p><p>3.方法：<br>节点.blur() 失去光标<br>节点.focus() 获取光标<br>节点.select() 选中内容高亮显示</p><p>4.样式：outline 控制input框获取焦点时边框的颜色，叫轮廓线 ，不要就设样式outline：none;</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br></pre></td><td class="code"><pre><span class="line">&lt;!DOCTYPE html&gt;</span><br><span class="line">&lt;html&gt;</span><br><span class="line">&lt;head&gt;</span><br><span class="line">&lt;title&gt;表单验证&lt;&#x2F;title&gt;</span><br><span class="line">&lt;meta charset&#x3D;&quot;utf-8&quot;&gt;</span><br><span class="line">&lt;&#x2F;head&gt;</span><br><span class="line">&lt;body&gt;</span><br><span class="line">姓名：</span><br><span class="line">&lt;input type&#x3D;&quot;text&quot; name&#x3D;&quot;&quot;&gt;</span><br><span class="line">密码：</span><br><span class="line">&lt;input type&#x3D;&quot;text&quot; name&#x3D;&quot;&quot;&gt;</span><br><span class="line">&lt;input type&#x3D;&quot;submit&quot; name&#x3D;&quot;&quot;&gt;</span><br><span class="line"></span><br><span class="line">&lt;script type&#x3D;&quot;text&#x2F;javascript&quot;&gt;</span><br><span class="line">&#x2F;&#x2F; 1.获取节点并检测</span><br><span class="line">var inps &#x3D; document.getElementsByTagName(&quot;input&quot;);</span><br><span class="line">console.log(inps);</span><br><span class="line">&#x2F;&#x2F; 2.给提交按钮加点击事件</span><br><span class="line">&#x2F;&#x2F; inps[2].onclick &#x3D; function()&#123;</span><br><span class="line">&#x2F;&#x2F; &#x2F;&#x2F; 2-1 获取姓名框里的值</span><br><span class="line">&#x2F;&#x2F; inpVal &#x3D; inps[0].value;</span><br><span class="line">&#x2F;&#x2F; &#x2F;&#x2F; 2-2 不能为空</span><br><span class="line">&#x2F;&#x2F; if(inpVal.length &#x3D;&#x3D; 0)&#123;</span><br><span class="line">&#x2F;&#x2F; alert(&quot;姓名不能为空&quot;);</span><br><span class="line">&#x2F;&#x2F; &#125;</span><br><span class="line"></span><br><span class="line">if(inpVal &#x3D;&#x3D; &quot;&quot;)&#123;</span><br><span class="line">alert(&quot;姓名不能为空&quot;);</span><br><span class="line">&#125;</span><br><span class="line">&#x2F;&#x2F; &#x2F;&#x2F; 2-2 姓名不能有数字 </span><br><span class="line">&#x2F;&#x2F; for(var i&#x3D;0;i&lt;inpVal.length;i++)&#123; &#x2F;&#x2F;获取姓名值中的每一个字符</span><br><span class="line">&#x2F;&#x2F; var j &#x3D; inpVal.substring(i,i+1);</span><br><span class="line">&#x2F;&#x2F; &#x2F;&#x2F; var m &#x3D; inpVal.charAt(i);</span><br><span class="line">&#x2F;&#x2F; console.log(m);</span><br><span class="line">&#x2F;&#x2F; &#x2F;&#x2F; 对字符进行判断</span><br><span class="line">&#x2F;&#x2F; if(j&gt;&#x3D;0)&#123;</span><br><span class="line">&#x2F;&#x2F; alert(&quot;姓名不能有数字&quot;);</span><br><span class="line">&#x2F;&#x2F; break;</span><br><span class="line">&#x2F;&#x2F; &#125;</span><br><span class="line">&#x2F;&#x2F; &#125;</span><br><span class="line">&#x2F;&#x2F; &#125;</span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F; 3.验证密码</span><br><span class="line">inps[2].onclick &#x3D; function()&#123;</span><br><span class="line">&#x2F;&#x2F; 3-1 密码不能为空</span><br><span class="line">&#x2F;&#x2F; 3-2 密码不少于6位</span><br><span class="line">&#x2F;&#x2F; if(inps[1].value.length &lt; 6)&#123; </span><br><span class="line">&#x2F;&#x2F; alert(&quot;密码不能为空或者密码不少于6位&quot;);</span><br><span class="line">&#x2F;&#x2F; &#125;</span><br><span class="line">&#x2F;&#x2F; 3-3密码都是数字</span><br><span class="line">&#x2F;&#x2F; 方法1：for来截取每个字符进行判断</span><br><span class="line">&#x2F;*for(var x&#x3D;0;x&lt;inps[1].value.length;x++)&#123;&#x2F;&#x2F;循环字符串</span><br><span class="line">var y &#x3D; inps[1].value.charAt(x);</span><br><span class="line">if(!(y&gt;&#x3D;0))&#123;</span><br><span class="line">alert(&quot;密码都是数字&quot;);</span><br><span class="line">break;</span><br><span class="line">&#125;</span><br><span class="line">&#125;*&#x2F;</span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F; 方法2：把密码当做整体和0比较 都是数字是true，有非数字是false,注意小数点</span><br><span class="line">&#x2F;*if(!(inps[1].value &gt;&#x3D; 0) || inps[1].value.indexOf(&quot;.&quot;) &gt;&#x3D; 0)&#123;</span><br><span class="line">alert(&quot;密码都是数字&quot;);</span><br><span class="line">&#125;else&#123;</span><br><span class="line">alert(&quot;OK&quot;);</span><br><span class="line">&#125;*&#x2F;</span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F; 方法3：把密码当做整体 和 转换为数字的密码值做比较</span><br><span class="line">&#x2F;&#x2F; if(inps[1].value !&#x3D; Number(inps[1].value) || inps[1].value.indexOf(&quot;.&quot;) &gt;&#x3D; 0)&#123;</span><br><span class="line">&#x2F;&#x2F; alert(&quot;密码要都是数字哦，你的密码里有非数字的&quot;);</span><br><span class="line">&#x2F;&#x2F; &#125;else&#123;</span><br><span class="line">&#x2F;&#x2F; alert(&quot;OK&quot;);</span><br><span class="line">&#x2F;&#x2F; &#125;</span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F; 方法4：isNaN(密码值)  整体判断密码值里有没有非数字</span><br><span class="line">&#x2F;*if(isNaN(inps[1].value) || inps[1].value.indexOf(&quot;.&quot;) &gt;&#x3D; 0)&#123;</span><br><span class="line">alert(&quot;密码要都是数字哦，你的密码里有非数字的&quot;);</span><br><span class="line">&#125;else&#123;</span><br><span class="line">alert(&quot;Ok&quot;)</span><br><span class="line">&#125;*&#x2F;</span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F; 3-1 密码不能为空</span><br><span class="line">&#x2F;&#x2F; 3-2 密码不少于6位</span><br><span class="line">&#x2F;&#x2F; 3-3密码都是数字</span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F; 合并的逻辑1：先判断长度是否&gt;&#x3D;6，长度ok的情况里面再判断有没有非数字</span><br><span class="line">&#x2F;*if(inps[1].value.length &gt;&#x3D; 6)&#123;</span><br><span class="line">if(isNaN(inps[1].value) || inps[1].value.indexOf(&quot;.&quot;) &gt;&#x3D; 0)&#123;</span><br><span class="line">alert(&quot;密码要都是数字哦，你的密码里有非数字的&quot;);</span><br><span class="line">&#125;else&#123;</span><br><span class="line">alert(&quot;Ok&quot;)</span><br><span class="line">&#125;</span><br><span class="line">&#125;else&#123;</span><br><span class="line">alert(&quot;alert(&quot;密码不能为空或者密码不少于6位&quot;);&quot;)</span><br><span class="line">&#125;</span><br><span class="line">*&#x2F;</span><br><span class="line">&#x2F;&#x2F; 合并的逻辑2：先判断有没有非数字,都是数字的情况下再判断长度是否&gt;&#x3D;6</span><br><span class="line">if( inps[1].value &gt;&#x3D; 0 &amp;&amp; inps[1].value.indexOf(&quot;.&quot;) &#x3D;&#x3D; -1)&#123;</span><br><span class="line">if(inps[1].value.length &lt; 6)&#123;</span><br><span class="line">alert(&quot;密码不能为空或者密码不少于6位&quot;);</span><br><span class="line">&#125;else&#123;</span><br><span class="line">alert(&quot;OK&quot;);</span><br><span class="line">&#125;</span><br><span class="line">&#125;else&#123;</span><br><span class="line">alert(&quot;密码要都是数字哦，你的密码里有非数字的&quot;);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&lt;&#x2F;script&gt;</span><br><span class="line">&lt;&#x2F;body&gt;</span><br><span class="line">&lt;&#x2F;html&gt;</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line">&lt;!DOCTYPE html&gt;</span><br><span class="line">&lt;html&gt;</span><br><span class="line">&lt;head&gt;</span><br><span class="line">&lt;title&gt;文本框特效&lt;&#x2F;title&gt;</span><br><span class="line">&lt;meta charset&#x3D;&quot;utf-8&quot;&gt;</span><br><span class="line">&lt;style type&#x3D;&quot;text&#x2F;css&quot;&gt;</span><br><span class="line">input&#123;</span><br><span class="line">outline: none;</span><br><span class="line">&#125;</span><br><span class="line">&lt;&#x2F;style&gt;</span><br><span class="line">&lt;&#x2F;head&gt;</span><br><span class="line">&lt;body&gt;</span><br><span class="line">邮箱：</span><br><span class="line">&lt;input type&#x3D;&quot;text&quot; name&#x3D;&quot;&quot; id&#x3D;&quot;inp1&quot; value&#x3D;&quot;输入正确的邮箱&quot;&gt;</span><br><span class="line"></span><br><span class="line">&lt;script type&#x3D;&quot;text&#x2F;javascript&quot;&gt;</span><br><span class="line">&#x2F;&#x2F; 1.获取节点并检测</span><br><span class="line">var inp1 &#x3D; document.getElementById(&quot;inp1&quot;);</span><br><span class="line">console.log(inp1);</span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F; 2.框获取光标，边框变红色, 提示文字清空</span><br><span class="line">inp1.onfocus &#x3D; function()&#123;</span><br><span class="line">inp1.style.border &#x3D; &quot;3px solid red&quot;;</span><br><span class="line">if(inp1.value &#x3D;&#x3D; &quot;输入正确的邮箱&quot;)&#123;</span><br><span class="line">inp1.value &#x3D; &quot;&quot;;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F; 3.框失去焦点，判断邮箱是否正确，邮箱不正确的话要选中内容高亮显示</span><br><span class="line">inp1.onblur &#x3D; function()&#123;</span><br><span class="line">if(inp1.value.length &#x3D;&#x3D; 0 || inp1.value.indexOf(&quot;@&quot;) &#x3D;&#x3D; -1 || inp1.value.indexOf(&quot;.&quot;) &#x3D;&#x3D; -1)&#123;</span><br><span class="line">inp1.select();</span><br><span class="line">&#125;else&#123;</span><br><span class="line">alert(&quot;邮箱Ok&quot;);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&lt;&#x2F;script&gt;</span><br><span class="line">&lt;&#x2F;body&gt;</span><br><span class="line">&lt;&#x2F;html&gt;</span><br></pre></td></tr></table></figure><h5 id="5-非弹出式提示框"><a href="#5-非弹出式提示框" class="headerlink" title="5.非弹出式提示框"></a>5.非弹出式提示框</h5><p>![1](E:/01 web Hopu（20180801）/2019.9实境教学/前端学习9.3-/1909/03 js/10.18非弹出式提示框，正则表达式/01 授课内容/1.png)</p><h4 id="实现思路"><a href="#实现思路" class="headerlink" title="实现思路"></a>实现思路</h4><p>文本框失去焦点事件onblur</p><p>使用innerHTML属性*div添中内容</p><h4 id="代码展示"><a href="#代码展示" class="headerlink" title="代码展示"></a>代码展示</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br></pre></td><td class="code"><pre><span class="line">&lt;!DOCTYPE html&gt;</span><br><span class="line">&lt;html&gt;</span><br><span class="line">&lt;head&gt;</span><br><span class="line">&lt;title&gt;非弹出式提示框&lt;&#x2F;title&gt;</span><br><span class="line">&lt;meta charset&#x3D;&quot;utf-8&quot;&gt;</span><br><span class="line">&lt;style&gt;</span><br><span class="line">.div1&#123;</span><br><span class="line">display: inline-block;</span><br><span class="line">font-size: 12px;</span><br><span class="line">color:#ccc;</span><br><span class="line">padding:0px 5px;</span><br><span class="line">box-sizing: border-box;</span><br><span class="line">&#125;</span><br><span class="line">.div2&#123;</span><br><span class="line">color:red;</span><br><span class="line">border:1px solid #000;</span><br><span class="line">background:#F8f4d0; </span><br><span class="line">&#125;</span><br><span class="line">&lt;&#x2F;style&gt;</span><br><span class="line">&lt;&#x2F;head&gt;</span><br><span class="line">&lt;body&gt;</span><br><span class="line">Emaile地址：</span><br><span class="line">&lt;input type&#x3D;&quot;text&quot; name&#x3D;&quot;&quot; id&#x3D;&quot;inp&quot;&gt;</span><br><span class="line">&lt;div id&#x3D;&quot;title&quot;&gt;&lt;&#x2F;div&gt;</span><br><span class="line"></span><br><span class="line">&lt;script type&#x3D;&quot;text&#x2F;javascript&quot;&gt;</span><br><span class="line">&#x2F;&#x2F; 1.获取节点并检测侧</span><br><span class="line">var inp &#x3D; document.getElementById(&quot;inp&quot;);</span><br><span class="line">var title &#x3D; document.getElementById(&quot;title&quot;);</span><br><span class="line">console.log(title);</span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F; 2.获取焦点，添加背景色，title的div里面加文字内容</span><br><span class="line">inp.onfocus &#x3D; function()&#123;</span><br><span class="line">inp.style.background &#x3D; &quot;#F0Fcdd&quot;;</span><br><span class="line">title.innerHTML &#x3D; &quot;此邮箱是您登陆邮箱的账号，并将用来接收验证邮件&quot;;</span><br><span class="line">&#x2F;*title.style.fontSize &#x3D; &quot;12px&quot;;</span><br><span class="line">title.style.color &#x3D; &quot;#ccc&quot;;*&#x2F;</span><br><span class="line">title.className &#x3D; &quot;div1&quot;;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F; 3.失去焦点，验证邮箱未通过时加背景色，修改提示的内容，加边框，字的颜色，验证通ton过 提示内容更换为图片</span><br><span class="line">inp.onblur &#x3D; function()&#123;</span><br><span class="line">if(inp.value.length &#x3D;&#x3D; 0 || inp.value.indexOf(&quot;@&quot;) &#x3D;&#x3D; -1 || inp.value.indexOf(&quot;.&quot;) &#x3D;&#x3D; -1)&#123;</span><br><span class="line">inp.style.background &#x3D; &quot;#F8f4d0&quot;;</span><br><span class="line">title.innerHTML &#x3D; &quot;邮箱格式不正确&quot;;</span><br><span class="line">title.className &#x3D; &quot;div1 div2&quot;;</span><br><span class="line">&#125;else&#123;</span><br><span class="line">title.innerHTML &#x3D; &#39;&lt;img src&#x3D;&quot;img&#x2F;register_write_ok.gif&quot;&gt;&#39;;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&lt;&#x2F;script&gt;</span><br><span class="line">&lt;&#x2F;body&gt;</span><br><span class="line">&lt;&#x2F;html&gt;</span><br></pre></td></tr></table></figure><h5 id="6、正则表达式"><a href="#6、正则表达式" class="headerlink" title="6、正则表达式"></a>6、正则表达式</h5><h5 id="知识点："><a href="#知识点：" class="headerlink" title="知识点："></a>知识点：</h5><p>​        1.定义：正则是用于处理文本的搜索模式<br>​        2.语法：var reg = /主体/修饰符（可选的）<br>​        3.修饰符：①i 不区分大小写  ②g全局找  ③m 找多行<br>​        4.主体看txt文档里的元字符<br>​        </p><pre><code>^ 开始 $结束次数：* 0-无数  + 1-无数  ？0次或1次  {n} n次 {n,} n-无数{n,m} n-m次范围：[自定义]\d 匹配数字   等价[0-9]\D 匹配非数字 等价[^0-9]x|y 匹配x或者y  x和y是可以自定义的  例子 [0-5] | [a-c]5.方法①search()  用于检索字符串中指定的子字符串，并返回子串的起始位置。字符串.search(正则) 返回值是索引号②test() 找字符串中有没有匹配的文本，返回布尔值正则.test(字符串)</code></pre><h5 id="实例代码展示"><a href="#实例代码展示" class="headerlink" title="实例代码展示"></a>实例代码展示</h5><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br></pre></td><td class="code"><pre><span class="line">&lt;!DOCTYPE html&gt;</span><br><span class="line">&lt;html&gt;</span><br><span class="line">&lt;head&gt;</span><br><span class="line">&lt;title&gt;正则表达式&lt;&#x2F;title&gt;</span><br><span class="line">&lt;meta charset&#x3D;&quot;utf-8&quot;&gt;</span><br><span class="line">&lt;&#x2F;head&gt;</span><br><span class="line">&lt;body&gt;</span><br><span class="line">&lt;h3&gt;</span><br><span class="line">验证手机号码</span><br><span class="line">&lt;&#x2F;h3&gt;</span><br><span class="line"></span><br><span class="line">手机号码：</span><br><span class="line">&lt;input type&#x3D;&quot;text&quot; name&#x3D;&quot;&quot;&gt;</span><br><span class="line"></span><br><span class="line">&lt;script type&#x3D;&quot;text&#x2F;javascript&quot;&gt;</span><br><span class="line">&#x2F;&#x2F; 需求：失去焦点验证手机号，要求11位 的 数字，要是中国大陆的手机号</span><br><span class="line">&#x2F;&#x2F; 1.获取节点并检测</span><br><span class="line">var inp &#x3D; document.getElementsByTagName(&quot;input&quot;)[0] ;</span><br><span class="line">&#x2F;&#x2F; console.log(inp);</span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F; 2.失去焦点验证手机号要求11位 的 数字，要是中国大陆的手机号 </span><br><span class="line">&#x2F;&#x2F; 中国大陆的手机号 第1位是 1 第2位 是34578中的任意1个  第3-11位 是数字</span><br><span class="line">inp.onblur &#x3D; function()&#123;</span><br><span class="line">var phone &#x3D; inp.value;</span><br><span class="line">&#x2F;&#x2F;方法1： js验证</span><br><span class="line">&#x2F;&#x2F; 2-1  11位 </span><br><span class="line">if(phone.length !&#x3D; 11)&#123;</span><br><span class="line">alert(&quot;手机号要是11位，您现在的是&quot; + phone.length +&quot;位&quot;);</span><br><span class="line">&#125;else if(isNaN(phone) || phone.indexOf(&quot;.&quot;) &gt; 0)&#123; &#x2F;&#x2F; 2-2 数字</span><br><span class="line">alert(&quot;手机号都应该是数字&quot;);</span><br><span class="line">&#125;else if(phone.charAt(0) !&#x3D; 1)&#123;</span><br><span class="line">alert(&quot;中国大陆的手机号 第1位是 1&quot;);</span><br><span class="line">&#125;else if(phone.charAt(1) &#x3D;&#x3D; 0 || phone.charAt(1) &#x3D;&#x3D; 1 || phone.charAt(1) &#x3D;&#x3D; 2 ||phone.charAt(1) &#x3D;&#x3D; 6 || phone.charAt(1) &#x3D;&#x3D; 9)&#123;</span><br><span class="line">alert(&quot;中国大陆的手机号 第2位 是34578中的任意1个&quot;);</span><br><span class="line">&#125;else&#123;</span><br><span class="line">alert(&quot;手机号OK&quot;);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F; 方法2：正则验证</span><br><span class="line">var reg &#x3D; &#x2F;^1[34578]&#123;1&#125;[0-9]&#123;9&#125;$&#x2F;;</span><br><span class="line">if(reg.test(phone))&#123;</span><br><span class="line">alert(&quot;手机号OK&quot;);</span><br><span class="line">&#125;else&#123;</span><br><span class="line">alert(&quot;中国大陆的手机号手机号要是11位，您现在的是&quot; + phone.length +&quot;第1位是   1, 第2位 是34578中的任意1个&quot;);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&lt;&#x2F;script&gt;</span><br><span class="line">&lt;&#x2F;body&gt;</span><br><span class="line">&lt;&#x2F;html&gt;</span><br></pre></td></tr></table></figure><h1 id="第五章-函数"><a href="#第五章-函数" class="headerlink" title="第五章 函数"></a>第五章 函数</h1><h3 id="1-定义-1"><a href="#1-定义-1" class="headerlink" title="1.定义"></a>1.定义</h3><p>程序的基本单元， 作用：实现一定功能，实质:代码语句块</p><h3 id="2-函数分类"><a href="#2-函数分类" class="headerlink" title="2.函数分类"></a>2.函数分类</h3><h5 id="（1）系统函数（js封装好的，直接调用的函数）"><a href="#（1）系统函数（js封装好的，直接调用的函数）" class="headerlink" title="（1）系统函数（js封装好的，直接调用的函数）"></a>（1）系统函数（js封装好的，直接调用的函数）</h5><p>①parseInt（）</p><p>②parseFloat（）</p><p>③isNaN（）</p><p>④Number（）</p><p>⑤Boolean（）</p><p>⑥String（）</p><h5 id="（2）自定义函数（自己按照需求封装的）"><a href="#（2）自定义函数（自己按照需求封装的）" class="headerlink" title="（2）自定义函数（自己按照需求封装的）"></a>（2）自定义函数（自己按照需求封装的）</h5><h6 id="函数的基本结构：function-函数名（参数）-语句块"><a href="#函数的基本结构：function-函数名（参数）-语句块" class="headerlink" title="函数的基本结构：function 函数名（参数）{ 语句块 }"></a>函数的基本结构：function 函数名（参数）{ 语句块 }</h6><p>分类：</p><p>①是否有函数名：有名/具名函数     匿名函数</p><p>单独声明一个函数，必须写名字， 命名规范同变量，注意函数名都小写</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">var fn &#x3D; function()&#123;</span><br><span class="line">console.log(1)</span><br><span class="line">&#125;&#x2F;&#x2F;匿名函数  &#x2F;函数表达式</span><br><span class="line"></span><br><span class="line">fn();&#x2F;&#x2F;函数调用，调用变量</span><br><span class="line"></span><br><span class="line">function con()&#123;</span><br><span class="line">console.log(2);</span><br><span class="line">&#125;&#x2F;&#x2F;具名函数</span><br><span class="line">con();&#x2F;&#x2F;调用函数</span><br></pre></td></tr></table></figure><p>②是否有参数：无参函数，有参函数</p><p>参数：放在（）里的内容   函数声明时（）里的叫形参，函数调用时（）里的叫实参</p><p>例子1：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">  &#x2F;&#x2F; 需求：计算任意两个数的和，并打印和</span><br><span class="line">var sum &#x3D; 6 + 18;&#x2F;&#x2F;确定的两个数的和</span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F; 满足需求：依赖用户输入</span><br><span class="line">var a &#x3D; Number(prompt(&quot;请输入第一个加数&quot;));</span><br><span class="line">var b &#x3D; Number(prompt(&quot;请输入第2个加数&quot;));</span><br><span class="line">console.log(a+b);</span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F; 满足需求：可修改</span><br><span class="line">&#x2F;&#x2F; 函数功能：计算任意两个数的和，并打印和</span><br><span class="line">&#x2F;&#x2F; 参数：</span><br><span class="line">&#x2F;&#x2F; x： 表示第一个加数   数字类型</span><br><span class="line">&#x2F;&#x2F; y： 表示第2个加数   数字类型</span><br><span class="line">&#x2F;&#x2F; 返回值：无</span><br><span class="line">function add(x,y)&#123;</span><br><span class="line">console.log(x+y);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">add(3,5);</span><br><span class="line">add(88,12);</span><br></pre></td></tr></table></figure><p>注意：</p><p>形参本质是一个变量，可以自定义，实参必须是确定的值</p><p>传参顺序：实参———&gt;形参    方向不能反</p><p>传参数量：实参是形参保持一致（数量），对应没传参的形参，取值是undefined，实参的顺序和形参的顺序也要保持一致</p><p>实参列表 ：arguments  类似数组，数组的属性和方法可以用，也可以用arguments[索引]修改传进来的实参的值</p><p>需要传参的情况：有相同的逻辑（实现功能），同时还有不同的内容，此时将相同逻辑封装到函数中，把不同的内容作为参数进行传参</p><p>例子2：点击按钮变色  </p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br></pre></td><td class="code"><pre><span class="line">&lt;!DOCTYPE html&gt;</span><br><span class="line">&lt;html&gt;</span><br><span class="line">&lt;head&gt;</span><br><span class="line">&lt;title&gt;02点击变色&lt;&#x2F;title&gt;</span><br><span class="line">&lt;meta charset&#x3D;&quot;utf-8&quot;&gt;</span><br><span class="line">&lt;style type&#x3D;&quot;text&#x2F;css&quot;&gt;</span><br><span class="line">.div1&#123;</span><br><span class="line">width:200px;</span><br><span class="line">height: 200px;</span><br><span class="line">border:2px solid #ccc;</span><br><span class="line">&#125;</span><br><span class="line">&lt;&#x2F;style&gt;</span><br><span class="line">&lt;&#x2F;head&gt;</span><br><span class="line">&lt;body&gt;</span><br><span class="line">&lt;div class&#x3D;&quot;div1&quot; onclick&#x3D;&quot;bgColor1(&#39;#abcdef&#39;)&quot;&gt;&lt;&#x2F;div&gt;</span><br><span class="line">&lt;input type&#x3D;&quot;button&quot; value&#x3D;&quot;变红&quot; onclick&#x3D;&quot;bgColor1(&#39;red&#39;)&quot;&gt;</span><br><span class="line">&lt;input type&#x3D;&quot;button&quot; value&#x3D;&quot;变绿&quot; onclick&#x3D;&quot;bgColor1(&#39;green&#39;)&quot;&gt;</span><br><span class="line">&lt;input type&#x3D;&quot;button&quot; value&#x3D;&quot;变蓝&quot; onclick&#x3D;&quot;bgColor1(&#39;blue&#39;)&quot;&gt;</span><br><span class="line"></span><br><span class="line">&lt;script type&#x3D;&quot;text&#x2F;javascript&quot;&gt;</span><br><span class="line">&#x2F;&#x2F; 1.获取节点并检测</span><br><span class="line">&#x2F;&#x2F; var oDiv &#x3D; document.getElementsByTagName(&quot;div&quot;)[0];</span><br><span class="line">&#x2F;&#x2F; var inps &#x3D; document.getElementsByTagName(&quot;input&quot;);</span><br><span class="line">&#x2F;&#x2F; console.log(inps);</span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F; 方法一：列举法  弊端：代码冗余  无法处理多数据</span><br><span class="line">&#x2F;&#x2F; 2.点击变红的按钮，让按钮变红色</span><br><span class="line">&#x2F;*inps[0].onclick &#x3D; function()&#123;</span><br><span class="line">oDiv.style.background &#x3D; &quot;red&quot;;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F; 3.点击变绿的按钮，让按钮变绿色</span><br><span class="line">inps[1].onclick &#x3D; function()&#123;</span><br><span class="line">oDiv.style.background &#x3D; &quot;green&quot;;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F; 3.点击变蓝的按钮，让按钮变蓝色</span><br><span class="line">inps[2].onclick &#x3D; function()&#123;</span><br><span class="line">oDiv.style.background &#x3D; &quot;blue&quot;;</span><br><span class="line">&#125;</span><br><span class="line">*&#x2F;</span><br><span class="line">&#x2F;&#x2F; 方法二：封装函数，相同逻辑：点击按钮，div变色，不同的内容是：不同的按钮，不同的颜色</span><br><span class="line">&#x2F;&#x2F; &#x2F;&#x2F; 封装颜色</span><br><span class="line">&#x2F;&#x2F; function bgColor1(color)&#123;</span><br><span class="line">&#x2F;&#x2F; oDiv.style.background &#x3D; color;</span><br><span class="line">&#x2F;&#x2F; &#125;</span><br><span class="line"></span><br><span class="line">&#x2F;*inps[0].onclick &#x3D; function()&#123;</span><br><span class="line">bgColor(&quot;red&quot;)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">inps[1].onclick &#x3D; function()&#123;</span><br><span class="line">bgColor(&quot;green&quot;)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">inps[2].onclick &#x3D; function()&#123;</span><br><span class="line">bgColor(&quot;blue&quot;)</span><br><span class="line">&#125;*&#x2F;</span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F; 封装颜色 按钮</span><br><span class="line">&#x2F;*function changeBgColor(obj,color)&#123;</span><br><span class="line">obj.onclick &#x3D; function()&#123;</span><br><span class="line">oDiv.style.background &#x3D; color;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">changeBgColor(inps[0],&quot;red&quot;);</span><br><span class="line">changeBgColor(inps[1],&quot;green&quot;);</span><br><span class="line">changeBgColor(inps[2],&quot;blue&quot;);*&#x2F;</span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F; 封装颜色 按钮 简化  在节点（html的标签）上调用函数  在节点上体现了不同按钮</span><br><span class="line">var oDiv &#x3D; document.getElementsByTagName(&quot;div&quot;)[0];</span><br><span class="line">&#x2F;&#x2F; 封装颜色</span><br><span class="line">function bgColor1(color)&#123;</span><br><span class="line">oDiv.style.background &#x3D; color;</span><br><span class="line">&#125;</span><br><span class="line">&lt;&#x2F;script&gt;</span><br><span class="line"></span><br><span class="line">&lt;&#x2F;body&gt;</span><br><span class="line">&lt;&#x2F;html&gt;</span><br></pre></td></tr></table></figure><p>写功能，封装函数的步骤：</p><p>第1步：先按照基本的思路如列举法  来实现效果</p><p>第2步：观察1的代码，分析出相同逻辑的和不同的内容，将相同逻辑封装到函数中，不同内容传参</p><p>第3步：优化</p><p>作业1：点击不同的按钮，让这个按钮本身变成按钮提示的颜色</p><p>例子3：封装随机变色的</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br></pre></td><td class="code"><pre><span class="line">&lt;!DOCTYPE html&gt;</span><br><span class="line">&lt;html&gt;</span><br><span class="line">&lt;head&gt;</span><br><span class="line">&lt;title&gt;03封装点击随机变色的函数&lt;&#x2F;title&gt;</span><br><span class="line">&lt;meta charset&#x3D;&quot;utf-8&quot;&gt;</span><br><span class="line">&lt;style type&#x3D;&quot;text&#x2F;css&quot;&gt;</span><br><span class="line">.div1&#123;</span><br><span class="line">width:200px;</span><br><span class="line">height: 200px;</span><br><span class="line">border:2px solid #ccc;</span><br><span class="line">&#125;</span><br><span class="line">&lt;&#x2F;style&gt;</span><br><span class="line">&lt;&#x2F;head&gt;</span><br><span class="line">&lt;body&gt;</span><br><span class="line">&lt;div class&#x3D;&quot;div1&quot;&gt;&lt;&#x2F;div&gt;</span><br><span class="line">&lt;input type&#x3D;&quot;button&quot; value&#x3D;&quot;变色&quot; onclick&#x3D;&quot;yanSe()&quot;&gt;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&lt;script type&#x3D;&quot;text&#x2F;javascript&quot;&gt;</span><br><span class="line">&#x2F;&#x2F; 1.获取节点并检测</span><br><span class="line">var oDiv &#x3D; document.getElementsByTagName(&quot;div&quot;)[0];</span><br><span class="line">var inp1 &#x3D; document.getElementsByTagName(&quot;input&quot;)[0];</span><br><span class="line">&#x2F;&#x2F; console.log(oDiv);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F; 2.点击变色的按钮，让div随机变色,弊端颜色是有范围限制</span><br><span class="line">&#x2F;*var colorArr &#x3D; [&quot;red&quot;,&quot;green&quot;,&quot;blue&quot;,&quot;orange&quot;,&quot;#ccc&quot;,&quot;#000&quot;];</span><br><span class="line">inp1.onclick &#x3D; function()&#123;</span><br><span class="line">var num &#x3D; parseInt(Math.random()*6);</span><br><span class="line">console.log(num);</span><br><span class="line">oDiv.style.background &#x3D; colorArr[num];</span><br><span class="line"></span><br><span class="line">&#125;*&#x2F;</span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F; 3.封装函数调用，相同逻辑：点击按钮，div变色，不同内容：div的颜色</span><br><span class="line">&#x2F;&#x2F; function bgColor1(color)&#123;</span><br><span class="line">&#x2F;&#x2F; oDiv.style.background &#x3D; color;</span><br><span class="line">&#x2F;&#x2F; &#125;</span><br><span class="line">&#x2F;&#x2F; 随机性体现在所传的参数上，需要什么颜色color传不同的颜色</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F; 4.不限制颜色范围，点击按钮，div随机颜色</span><br><span class="line">&#x2F;*function yanSe()&#123;</span><br><span class="line">var zhi &#x3D; &quot;&quot;;&#x2F;&#x2F;给zhi赋值空字符串</span><br><span class="line"></span><br><span class="line">for(var i&#x3D;0;i&lt;6;i++)&#123;&#x2F;&#x2F;生成0-9的随机数 6个</span><br><span class="line"> zhi &#x3D; zhi + Math.floor(Math.random()*10);</span><br><span class="line">&#125;</span><br><span class="line">console.log(zhi);</span><br><span class="line"></span><br><span class="line">oDiv.style.background &#x3D;&quot;#&quot; + zhi;</span><br><span class="line">&#125;*&#x2F;</span><br><span class="line">&lt;&#x2F;script&gt;</span><br><span class="line"></span><br><span class="line">&lt;&#x2F;body&gt;</span><br><span class="line">&lt;&#x2F;html&gt;</span><br></pre></td></tr></table></figure><p>③是否有返回值：无返回值的函数，带返回值的函数 用return关键字返回，return后的代码不执行即return结束函数</p><p>例子4：小于10的数，加0补位</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">函数封装  小于10的加0补位  相同逻辑：若果小于10的数要加0补位，反之是本身  不同的内容：要补得东西不同（时分秒，序号等）不同</span><br><span class="line">function buWei(i)&#123;</span><br><span class="line">if(i&lt;10)&#123;</span><br><span class="line">i &#x3D; &quot;0&quot; + i;</span><br><span class="line">&#125;else&#123;</span><br><span class="line">i</span><br><span class="line">&#125;</span><br><span class="line">return i;&#x2F;&#x2F;返回参数i的值</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;第一章-js基础语法&quot;&gt;&lt;a href=&quot;#第一章-js基础语法&quot; class=&quot;headerlink&quot; title=&quot;第一章    js基础语法&quot;&gt;&lt;/a&gt;第一章    js基础语法&lt;/h1&gt;
    
    </summary>
    
    
    
  </entry>
  
  <entry>
    <title>CSS3的整体梳理</title>
    <link href="http://yoursite.com/2020/05/12/CSS3%E7%9A%84%E6%95%B4%E4%BD%93%E6%A2%B3%E7%90%86/"/>
    <id>http://yoursite.com/2020/05/12/CSS3%E7%9A%84%E6%95%B4%E4%BD%93%E6%A2%B3%E7%90%86/</id>
    <published>2020-05-12T07:00:06.955Z</published>
    <updated>2020-05-12T07:00:49.491Z</updated>
    
    <content type="html"><![CDATA[<h1 id="CSS3的整体梳理"><a href="#CSS3的整体梳理" class="headerlink" title="CSS3的整体梳理"></a>CSS3的整体梳理</h1><a id="more"></a><h2 id="一、CSS3基础"><a href="#一、CSS3基础" class="headerlink" title="一、CSS3基础"></a>一、CSS3基础</h2><p>1.css3是最新的css标准，也会层叠样式表（默写）</p><p>2.主流浏览器及前缀（默写）<br>IE         -ms-<br>火狐          -moz-<br>苹果和谷歌     -webkit-<br>opera：        -o-</p><p>3.border-radius 边框圆角 可以给1个值 4角一样，给多个值按照上右下左的顺序取值，没有值的和对角一样（默写）</p><p>4.border-image  边框图片 作为边框的图片要满足九宫格的形式</p><p>5.source资源、来源、路径</p><p>6.slice分割</p><p>7.repeat重复</p><p>8.box-shadow盒子阴影（默写）<br>取值：①水平阴影 ②垂直阴影 ③模糊距离 ④阴影尺寸 ⑤颜色 ⑥内外阴影<br>①②必须写   ①②③④的值都给长度单位</p><p>9.text-shadow 文本阴影/效果<br>取值：①②③⑤    ①②必须写</p><h2 id="二、背景-不透明度-字体"><a href="#二、背景-不透明度-字体" class="headerlink" title="二、背景 不透明度  字体"></a>二、背景 不透明度  字体</h2><p>1.background-size  背景尺寸 一般取值给%   作用：根据需要将背景图铺到标签内</p><p>2.从精灵图/雪碧图上引小图，作用：①减少图片所占空间，加快加载速度 ②减少http请求的次数</p><p>3.引小图和引背景图的步骤一致，注意图片定位</p><p>4.一个标签内可以引多个背景图，每个之间用逗号隔开<br>例子：background：url(img/1.png) no-rapeat 0px 0px,url(img/2.png) no-rapeat 100px 100px</p><p>5.如果1个列表的每个li都引同一个大图，大图引在li里面，小图的定位单独放在每个li的类里面，见背景例子</p><p>6.如果一个li有背景图，移入之后又加背景色，一定用 li：hover{background-color：red；}</p><p>7.不透明度<br>①样式opacity  取值0-1之间  取0表示完全透明 看不见标签了  取1表示不透明  也会影响标签内的文本<br>②给background-color的取值为rgba(23,34,155,0.6) 其中r——red  g——green b——blue a-不透明度<br>a的取值也是0-1之间，0完全透明，1不透明  ，只影响背景色不影响文本<br>延伸：要调色板input type=“color” rgb取值范围 0-255</p><h2 id="三、2d-3d的转换"><a href="#三、2d-3d的转换" class="headerlink" title="三、2d  3d的转换"></a>三、2d  3d的转换</h2><p>1.要想改变一个盒子的位置，可以有以下方法<br>①给自己加margin值</p><p>②给父级加padding值，并加上box-sizing：border-box</p><p>③给自己加相对定位，并加偏移量</p><p>④给自己加绝对定位，并加偏移量，同时给父级加相对定位</p><p>⑤给自己加2d的位移，transform：translate（水平偏移量，垂直偏移量）</p><p>2.transform：translate（）位移  （）里传两个值<br>transform：translateX（水平偏移量）<br>transform：translateY（垂直偏移量）</p><p>3.transform：rotate（数字deg）旋转 数字&gt;0 顺时针旋转  数字&lt;0 逆时针旋转<br>旋转的基点默认在中心点，也可以用transform-origin：left top；</p><p>4.transform：scale（宽的倍数，高的倍数）<br>①取值大于1   放大<br>②取值=1      本身<br>③0&lt;取值&lt;1    缩小<br>④ -1&lt;取值&lt;0  翻转缩小<br>⑤ 取值&lt;-1    翻转放大<br>⑥ 取值=0     缩小为0  不可见了<br>⑦ 取值= -1   翻转  大小不变</p><p>5.transform-origin  基点  默认的基点在中心的</p><p>①2d的基点在标签的对角线的交点上，也可以自己设置，分为x轴（width）和y轴（height），取值可以取关键字 （x轴：left center right，y轴：top middle bottom），具体的长度值如100px等，以及%</p><p>②3d的基点的基础上多了一个z轴，z轴的取值只能是具体的长度值</p><p>6.设置在父级上的样式，必须设置子级才有3d效果<br>①perspective：1000px  视角（距离）<br>②transform-style：preserve-3d  展示3d效果的舞台</p><h2 id="四、渐变-过渡-动画"><a href="#四、渐变-过渡-动画" class="headerlink" title="四、渐变  过渡  动画"></a>四、渐变  过渡  动画</h2><h3 id="（一）渐变"><a href="#（一）渐变" class="headerlink" title="（一）渐变"></a>（一）渐变</h3><p>1.定义：指背景在多个颜色之间平稳的变化</p><p>2.分类：线性渐变  径向渐变</p><p>3.生成：浏览器生成 清晰  本质是背景图片即background-image</p><p>4.线性渐变<br>①从上到下：background: linear-gradient(red, blue);如果要从下往上，可以改变颜色的顺序，也可以再多加一个参数 to top(可以改成上下左右任意方向)</p><p>②重复的线性渐变：repeating-linear-gradient(red, yellow 10%, green 20%);<br>颜色和百分比之间是空格隔开，百分比可以给也可以不给，多个颜色给百分比，后面的颜色的百分比比前一个要大</p><p>5.径向渐变<br>①background: radial-gradient(red, green, blue);颜色不加百分比就是均匀分布，加百分比，是不均匀分布，颜色默认形状是椭圆，要变成圆，可以将标签改成正方形（注意：可能会影响布局），也可以在（）内加参数circle 即background: radial-gradient(circle,red, green, blue);</p><p>②重复的径向渐变 同重复的线性渐变</p><h4 id="（二）过渡"><a href="#（二）过渡" class="headerlink" title="（二）过渡"></a>（二）过渡</h4><p>1.定义：相同的样式，从一种样式值到另一种值的变化</p><p>2.过渡有4个分属性：<br>①transition-property 要过渡的样式名  取值：all所有样式名  取具体的样式名  none没有<br>②transition-duration 要花费的的时间  取值：3s 或者1000ms等<br>①②必写<br>③transition-delay 等待时间 取值同②<br>④transition-timing-function 时间/运动曲线 默认值ease  匀速linear</p><p>3.复合属性transition，取值无顺序要求，浏览器默认第一个时间为花费时间<br>例子：transition：height 10s 500ms linear  过渡高，花10秒时间，等待500毫秒后开始过渡，以匀速的状态</p><h4 id="（三）动画"><a href="#（三）动画" class="headerlink" title="（三）动画"></a>（三）动画</h4><p>1.创建动画<br>@keyframes 动画名{<br>    0%{样式声明}<br>    40%{样式声明}<br>    100%{样式声明}<br>}</p><p>分段尽量均匀</p><p>2.调用动画 （看菜鸟教程上的动画）<br>哪个标签需要动画，就把动画调用在这个标签的样式里<br>animation：名字 花费时间 linear 3s  infinite  alternate  both</p>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;CSS3的整体梳理&quot;&gt;&lt;a href=&quot;#CSS3的整体梳理&quot; class=&quot;headerlink&quot; title=&quot;CSS3的整体梳理&quot;&gt;&lt;/a&gt;CSS3的整体梳理&lt;/h1&gt;
    
    </summary>
    
    
    
  </entry>
  
  <entry>
    <title>js进阶</title>
    <link href="http://yoursite.com/2020/05/12/js%E8%BF%9B%E9%98%B6/"/>
    <id>http://yoursite.com/2020/05/12/js%E8%BF%9B%E9%98%B6/</id>
    <published>2020-05-12T07:00:06.939Z</published>
    <updated>2020-05-12T07:00:49.498Z</updated>
    
    <content type="html"><![CDATA[<h1 id="js复习第二部分"><a href="#js复习第二部分" class="headerlink" title="js复习第二部分"></a>js复习第二部分</h1><a id="more"></a><h1 id="第六章-BOM"><a href="#第六章-BOM" class="headerlink" title="第六章  BOM"></a>第六章  BOM</h1><h3 id="1-定义"><a href="#1-定义" class="headerlink" title="1.定义"></a>1.定义</h3><p>BOM 浏览器对象模型，是js的一部分，js包括ECMAscript 、BOM、DOM</p><h3 id="2-组成"><a href="#2-组成" class="headerlink" title="2.组成"></a>2.组成</h3><p>window对象，包括history对象，location对象，DOM对象</p><h3 id="3-window对象的常用事件"><a href="#3-window对象的常用事件" class="headerlink" title="3.window对象的常用事件"></a>3.window对象的常用事件</h3><h5 id="（1）鼠标事件"><a href="#（1）鼠标事件" class="headerlink" title="（1）鼠标事件"></a>（1）鼠标事件</h5><h6 id="①节点-onclick-单击鼠标左键"><a href="#①节点-onclick-单击鼠标左键" class="headerlink" title="①节点.onclick  单击鼠标左键"></a>①节点.onclick  单击鼠标左键</h6><h6 id="②节点-ondblclick-双击鼠标左键"><a href="#②节点-ondblclick-双击鼠标左键" class="headerlink" title="②节点.ondblclick   双击鼠标左键"></a>②节点.ondblclick   双击鼠标左键</h6><h6 id="③节点-onmouseover-鼠标移入节点"><a href="#③节点-onmouseover-鼠标移入节点" class="headerlink" title="③节点.onmouseover  鼠标移入节点"></a>③节点.onmouseover  鼠标移入节点</h6><h6 id="④节点-onmouseout-鼠标移出节点"><a href="#④节点-onmouseout-鼠标移出节点" class="headerlink" title="④节点.onmouseout   鼠标移出节点"></a>④节点.onmouseout   鼠标移出节点</h6><h6 id="⑤节点-onmouseenter-鼠标进入节点"><a href="#⑤节点-onmouseenter-鼠标进入节点" class="headerlink" title="⑤节点.onmouseenter  鼠标进入节点"></a>⑤节点.onmouseenter  鼠标进入节点</h6><h6 id="⑥节点-onmouseleave-鼠标离开节点"><a href="#⑥节点-onmouseleave-鼠标离开节点" class="headerlink" title="⑥节点.onmouseleave   鼠标离开节点"></a>⑥节点.onmouseleave   鼠标离开节点</h6><h6 id="⑦节点-onmousedown-按下鼠标左键"><a href="#⑦节点-onmousedown-按下鼠标左键" class="headerlink" title="⑦节点.onmousedown   按下鼠标左键"></a>⑦节点.onmousedown   按下鼠标左键</h6><h6 id="⑧节点-onmouseup-松开鼠标左键"><a href="#⑧节点-onmouseup-松开鼠标左键" class="headerlink" title="⑧节点.onmouseup         松开鼠标左键"></a>⑧节点.onmouseup         松开鼠标左键</h6><h6 id="⑨节点-onmousemove-鼠标移动"><a href="#⑨节点-onmousemove-鼠标移动" class="headerlink" title="⑨节点.onmousemove    鼠标移动"></a>⑨节点.onmousemove    鼠标移动</h6><h5 id="（2）键盘事件"><a href="#（2）键盘事件" class="headerlink" title="（2）键盘事件"></a>（2）键盘事件</h5><h6 id="①onkeydown-键盘按键被按下"><a href="#①onkeydown-键盘按键被按下" class="headerlink" title="①onkeydown   键盘按键被按下"></a>①onkeydown   键盘按键被按下</h6><h6 id="②onkeyup-键盘按键松开"><a href="#②onkeyup-键盘按键松开" class="headerlink" title="②onkeyup         键盘按键松开"></a>②onkeyup         键盘按键松开</h6><h6 id="③onkeypress-键盘按键从按下到松开"><a href="#③onkeypress-键盘按键从按下到松开" class="headerlink" title="③onkeypress    键盘按键从按下到松开"></a>③onkeypress    键盘按键从按下到松开</h6><h5 id="（3）表单事件"><a href="#（3）表单事件" class="headerlink" title="（3）表单事件"></a>（3）表单事件</h5><h6 id="①onfocus-获得焦点"><a href="#①onfocus-获得焦点" class="headerlink" title="①onfocus      获得焦点"></a>①onfocus      获得焦点</h6><h6 id="②onblur-失去焦点"><a href="#②onblur-失去焦点" class="headerlink" title="②onblur         失去焦点"></a>②onblur         失去焦点</h6><h6 id="③onreset-重置按钮被点击"><a href="#③onreset-重置按钮被点击" class="headerlink" title="③onreset       重置按钮被点击"></a>③onreset       重置按钮被点击</h6><h6 id="④onsubmit-提交按钮被点击"><a href="#④onsubmit-提交按钮被点击" class="headerlink" title="④onsubmit    提交按钮被点击"></a>④onsubmit    提交按钮被点击</h6><h6 id="⑤节点-onchange-内容改变，失去焦点时"><a href="#⑤节点-onchange-内容改变，失去焦点时" class="headerlink" title="⑤节点.onchange             内容改变，失去焦点时"></a>⑤节点.onchange             内容改变，失去焦点时</h6><h5 id="（4）UI事件"><a href="#（4）UI事件" class="headerlink" title="（4）UI事件"></a>（4）UI事件</h5><h6 id="①onload-加载页面或者图片-把js写在头部并且要获取节点必须写加载事件，一个页面中加载只能生效一次"><a href="#①onload-加载页面或者图片-把js写在头部并且要获取节点必须写加载事件，一个页面中加载只能生效一次" class="headerlink" title="①onload      加载页面或者图片 把js写在头部并且要获取节点必须写加载事件，一个页面中加载只能生效一次"></a>①onload      加载页面或者图片 把js写在头部并且要获取节点必须写加载事件，一个页面中加载只能生效一次</h6><h6 id="②onresize-窗口尺寸事件-窗口变大或变小"><a href="#②onresize-窗口尺寸事件-窗口变大或变小" class="headerlink" title="②onresize     窗口尺寸事件    窗口变大或变小"></a>②onresize     窗口尺寸事件    窗口变大或变小</h6><h6 id="③onscroll-滚动条监听事件-滚动滚动条触发"><a href="#③onscroll-滚动条监听事件-滚动滚动条触发" class="headerlink" title="③onscroll     滚动条监听事件   滚动滚动条触发"></a>③onscroll     滚动条监听事件   滚动滚动条触发</h6><h3 id="4-window常用方法"><a href="#4-window常用方法" class="headerlink" title="4.window常用方法"></a>4.window常用方法</h3><h4 id="（1）弹窗-阻塞进程"><a href="#（1）弹窗-阻塞进程" class="headerlink" title="（1）弹窗      阻塞进程"></a>（1）弹窗      阻塞进程</h4><p>①alert(警示信息)   弹出警示框，只有一个确定的按钮</p><p>②prompt（输入什么内容的提示）   弹出输入框，有输入区域，有确定和取消两个按钮，点击确定返回输入的内容，点取消返回null</p><p>③confirm（提示信息）   弹出确认框   有确定和取消两个按钮，点击确定返回 true，点取消返回false，常和选择结构搭配使用</p><h4 id="（2）计时-所有的定时器只有开关两种状态-只能调用全局的函数-需要传函数的参数时，就放在毫秒数的后面，中间用逗号隔开"><a href="#（2）计时-所有的定时器只有开关两种状态-只能调用全局的函数-需要传函数的参数时，就放在毫秒数的后面，中间用逗号隔开" class="headerlink" title="（2）计时    所有的定时器只有开关两种状态   只能调用全局的函数  需要传函数的参数时，就放在毫秒数的后面，中间用逗号隔开"></a>（2）计时    所有的定时器只有开关两种状态   只能调用全局的函数  需要传函数的参数时，就放在毫秒数的后面，中间用逗号隔开</h4><p>①setInterval（函数名/匿名函数，间隔毫秒数） 每隔多久执行一次</p><p>clearInterval（开的定时器的id） 清除定时器</p><p>②setTimeout（函数/匿名函数，等待毫秒数）  等到一定的时间，执行一次</p><p>clearTimeout（开的定时器的id） 清除定时器</p><h4 id="（3）打开新窗口-window-open"><a href="#（3）打开新窗口-window-open" class="headerlink" title="（3）打开新窗口  window.open()"></a>（3）打开新窗口  window.open()</h4><h5 id="window-open-方法用于打开一个新的浏览器窗口或查找一个已命名的窗口。"><a href="#window-open-方法用于打开一个新的浏览器窗口或查找一个已命名的窗口。" class="headerlink" title="window.open() 方法用于打开一个新的浏览器窗口或查找一个已命名的窗口。"></a>window.open() 方法用于打开一个新的浏览器窗口或查找一个已命名的窗口。</h5><p>​        语法：window.open(URL,name,specs,replace)<br>​        1.URL打开指定的页面的URL。如果没有指定URL，打开新的空白窗口<br>​        2.指定target属性或窗口的名称 默认值： _blank<br>​        3.一个逗号分隔的项目列表：<br>​        height=pixels    窗口的高度。最小值为100<br>​        width=pixels    窗口的宽度.最小值为100<br>​        left=pixels        该窗口的左侧位置<br>​        top=pixels        窗口顶部的位置.仅限IE浏览器</p><p>​       例子：//打开一个新的窗口<br>​       window.open(‘open.html’,’_blank’,’top=0,left=0,width=600,height=327’);</p><h3 id="5-history-浏览历史"><a href="#5-history-浏览历史" class="headerlink" title="5.history 浏览历史"></a>5.history 浏览历史</h3><h5 id="①history-back-前一个-等价于-history-go-1"><a href="#①history-back-前一个-等价于-history-go-1" class="headerlink" title="①history.back()         前一个    等价于  history.go(-1)"></a>①history.back()         前一个    等价于  history.go(-1)</h5><h5 id="②history-forward-下一个-等价于-history-go-1"><a href="#②history-forward-下一个-等价于-history-go-1" class="headerlink" title="②history.forward()  下一个     等价于 history.go(1)"></a>②history.forward()  下一个     等价于 history.go(1)</h5><h3 id="6-location对象-当前地址"><a href="#6-location对象-当前地址" class="headerlink" title="6.location对象   当前地址"></a>6.location对象   当前地址</h3><h5 id="（1）属性"><a href="#（1）属性" class="headerlink" title="（1）属性"></a>（1）属性</h5><p>①location.host               返回主机名和端口号</p><p>②location.hostname     返回主机名</p><p>③location.href                返回完整的URL</p><p>​    location.href = “<a href="https://www.baidu.com&quot;" target="_blank" rel="noopener">https://www.baidu.com&quot;</a>   设置当前页面的URL  注意要是完整的URL</p><h5 id="（2）方法"><a href="#（2）方法" class="headerlink" title="（2）方法"></a>（2）方法</h5><p>①location.reload()   刷新当前页面</p><p>②location.replace()   替换当前页面，（）里的参数传完整的URL地址</p><h3 id="7-document对象-既是BOM的一部分，也是独立的DOM"><a href="#7-document对象-既是BOM的一部分，也是独立的DOM" class="headerlink" title="7.document对象   既是BOM的一部分，也是独立的DOM"></a>7.document对象   既是BOM的一部分，也是独立的DOM</h3><h5 id="（1）属性-1"><a href="#（1）属性-1" class="headerlink" title="（1）属性"></a>（1）属性</h5><p>①document.URL   返回当前页面的完整地址    返回的等价于location.href</p><p>②document.referrer   返回当前页面  来源页面的URL</p><h5 id="（2）查找节点的3个方法"><a href="#（2）查找节点的3个方法" class="headerlink" title="（2）查找节点的3个方法"></a>（2）查找节点的3个方法</h5><p>①Id</p><p>②name</p><p>③tagName</p><h5 id="（3）改变内容"><a href="#（3）改变内容" class="headerlink" title="（3）改变内容"></a>（3）改变内容</h5><p>①节点.innerHTML = “新内容”</p><h5 id="（4）改变属性"><a href="#（4）改变属性" class="headerlink" title="（4）改变属性"></a>（4）改变属性</h5><p>①节点.属性名 = “新的属性值”</p><p>②节点.setAttribute(“属性名”,”新的属性值”)</p><h5 id="5-查看属性值"><a href="#5-查看属性值" class="headerlink" title="(5)查看属性值"></a>(5)查看属性值</h5><p>①节点.getAttribute(“属性名”)</p><h5 id="6-改变样式"><a href="#6-改变样式" class="headerlink" title="(6)改变样式"></a>(6)改变样式</h5><p>①节点.style.样式名 = “新的样式值”</p><p>②节点.style = “新的样式声明”   适用于修改多个样式的情况</p><h1 id="第七章-DOM"><a href="#第七章-DOM" class="headerlink" title="第七章 DOM"></a>第七章 DOM</h1><h3 id="1-DOM操作HTML文档的内容，样式，属性，事件，标签-增删改查"><a href="#1-DOM操作HTML文档的内容，样式，属性，事件，标签-增删改查" class="headerlink" title="1.DOM操作HTML文档的内容，样式，属性，事件，标签(增删改查)"></a>1.DOM操作HTML文档的内容，样式，属性，事件，标签(增删改查)</h3><h3 id="2-查找节点的方法"><a href="#2-查找节点的方法" class="headerlink" title="2.查找节点的方法"></a>2.查找节点的方法</h3><h5 id="（1）用js内置的函数查找（ById，ByName，ByTagName）"><a href="#（1）用js内置的函数查找（ById，ByName，ByTagName）" class="headerlink" title="（1）用js内置的函数查找（ById，ByName，ByTagName）"></a>（1）用js内置的函数查找（ById，ByName，ByTagName）</h5><h5 id="（2）用DOM树层级关系的查找节点"><a href="#（2）用DOM树层级关系的查找节点" class="headerlink" title="（2）用DOM树层级关系的查找节点"></a>（2）用DOM树层级关系的查找节点</h5><p>①子节点.parentNode   找到父节点  要找到祖先节点，就在父后面接着用这个属性  </p><p>例如：son1.parentNode.parentNode  找的是son1的祖先元素</p><p>②父节点.childNodes   找的是子节点集合，包括文本节点，如果要找元素节点就在后面加 [索引]</p><p>③父节点.firstElementChild   找父节点里的第一个标签子节点</p><p>④父节点.lastElementChild   找父节点里的最后一个标签子节点</p><p>⑤兄节点.nextElementSibling  找紧跟着兄节点的标签弟节点</p><p>⑥弟节点.previousElementSibling  找紧挨着弟节点的兄节点</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><span class="line">&lt;!DOCTYPE html&gt;</span><br><span class="line">&lt;html&gt;</span><br><span class="line">&lt;head&gt;</span><br><span class="line">&lt;title&gt;DOM基础&lt;&#x2F;title&gt;</span><br><span class="line">&lt;meta charset&#x3D;&quot;utf-8&quot;&gt;</span><br><span class="line">&lt;&#x2F;head&gt;</span><br><span class="line">&lt;body&gt;</span><br><span class="line">&lt;!-- &lt;div class&#x3D;&quot;wrap&quot;&gt;</span><br><span class="line">&lt;div class&#x3D;&quot;fu&quot;&gt;</span><br><span class="line">&lt;div class&#x3D;&quot;son&quot; id&#x3D;&quot;son1&quot;&gt;&lt;&#x2F;div&gt;</span><br><span class="line">&lt;a href&#x3D;&quot;&quot;&gt;&lt;&#x2F;a&gt;</span><br><span class="line">&lt;span&gt;&lt;&#x2F;span&gt;</span><br><span class="line">&lt;&#x2F;div&gt;</span><br><span class="line">&lt;&#x2F;div&gt;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&lt;script type&#x3D;&quot;text&#x2F;javascript&quot;&gt;</span><br><span class="line">var son1 &#x3D; document.getElementById(&quot;son1&quot;);</span><br><span class="line">&#x2F;&#x2F; console.log(son1.parentNode.parentNode);</span><br><span class="line">console.log(son1.nextElementSibling.previousElementSibling)</span><br><span class="line">&lt;&#x2F;script&gt; --&gt;</span><br><span class="line"></span><br><span class="line">&lt;table&gt;</span><br><span class="line"></span><br><span class="line">&lt;tr&gt;</span><br><span class="line">&lt;td&gt;123&lt;&#x2F;td&gt;</span><br><span class="line">&lt;td&gt;&lt;&#x2F;td&gt;</span><br><span class="line">&lt;&#x2F;tr&gt;</span><br><span class="line">&lt;tr id&#x3D;&quot;tr2&quot;&gt;</span><br><span class="line">&lt;td&gt;&lt;&#x2F;td&gt;</span><br><span class="line">&lt;td&gt;&lt;&#x2F;td&gt;</span><br><span class="line">&lt;&#x2F;tr&gt;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&lt;&#x2F;table&gt;</span><br><span class="line"></span><br><span class="line">&lt;script type&#x3D;&quot;text&#x2F;javascript&quot;&gt;</span><br><span class="line"></span><br><span class="line">var tr2 &#x3D; document.getElementById(&quot;tr2&quot;);</span><br><span class="line">console.log(tr2.previousElementSibling );</span><br><span class="line">&lt;&#x2F;script&gt;</span><br><span class="line">&lt;&#x2F;body&gt;</span><br><span class="line">&lt;&#x2F;html&gt;</span><br></pre></td></tr></table></figure><h5 id="（3）增加节点"><a href="#（3）增加节点" class="headerlink" title="（3）增加节点"></a>（3）增加节点</h5><p>①document.createElement(“标签名”)  按照给的标签名创建一个标签</p><p>②父节点.appendChild(子节点)   把子节点添加到父节点的末尾</p><p>③父节点.insertBefore(要插入的节点，指定节点)   在指定节点前插入新节点 插入的是兄节点</p><p>父节点是body   代码要写document.body.insertBefore()</p><p>④要克隆的节点.cloneNode()   ()里不传参，表示克隆节点本身，传true表示克隆节点及其后代，克隆/复制好的节点还是要用②或③的方法放到页面里</p><h5 id="（4）删除节点"><a href="#（4）删除节点" class="headerlink" title="（4）删除节点"></a>（4）删除节点</h5><p>父节点.removeChild(要删除的子节点)   从父节点中删除子节点，注意父节点是body   代码要写document.body.removeChild(要删除的子节点) </p><h5 id="（5）替换节点"><a href="#（5）替换节点" class="headerlink" title="（5）替换节点"></a>（5）替换节点</h5><p>父节点名.replaceChild(用来替换的节点名,被替换的节点名)</p><h1 id="第八章-事件"><a href="#第八章-事件" class="headerlink" title="第八章   事件"></a>第八章   事件</h1><h2 id="1-定义-1"><a href="#1-定义-1" class="headerlink" title="1.定义"></a>1.定义</h2><p>你若触发，我便执行   （记住事件的触发机制）</p><h2 id="2-分类"><a href="#2-分类" class="headerlink" title="2.分类"></a>2.分类</h2><h4 id="①鼠标事件（9个-）"><a href="#①鼠标事件（9个-）" class="headerlink" title="①鼠标事件（9个 ）"></a>①鼠标事件（9个 ）</h4><p>点击   双击   移入 移出  进入 离开  移动  按下 松开</p><h4 id="②键盘事件（3个）"><a href="#②键盘事件（3个）" class="headerlink" title="②键盘事件（3个）"></a>②键盘事件（3个）</h4><p>按下  松开  经过</p><h4 id="③表单事件（5个）"><a href="#③表单事件（5个）" class="headerlink" title="③表单事件（5个）"></a>③表单事件（5个）</h4><p>获取焦点   失去焦点    域的内容改变    提交   重置</p><h4 id="④UI事件（3个）–-用户界面"><a href="#④UI事件（3个）–-用户界面" class="headerlink" title="④UI事件（3个）– 用户界面"></a>④UI事件（3个）– 用户界面</h4><p>加载页面/图片     窗口大小改变 onresize      滚动条监听事件onscroll</p><h3 id="3-event（当前事件对象）"><a href="#3-event（当前事件对象）" class="headerlink" title="3.event（当前事件对象）"></a>3.event（当前事件对象）</h3><h5 id="①event是js封装好的对象可以直接用"><a href="#①event是js封装好的对象可以直接用" class="headerlink" title="①event是js封装好的对象可以直接用"></a>①event是js封装好的对象可以直接用</h5><p>属性 event.clientX  鼠标的横坐标  event.clientY  鼠标的纵坐标   event.target目标对象   event.type  事件的类型</p><h5 id="②兼容火狐和非火狐的浏览器"><a href="#②兼容火狐和非火狐的浏览器" class="headerlink" title="②兼容火狐和非火狐的浏览器"></a>②兼容火狐和非火狐的浏览器</h5><p>节点.事件名 = function（e）{</p><p>​        var oEv = e || event;</p><p>​        console.log(oEv );</p><p>}</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&#x2F;&#x2F; 处理兼容性  火狐 和 非火狐</span><br><span class="line">oDiv.onmouseover &#x3D; function(e)&#123;</span><br><span class="line">    var oEv &#x3D; e || event;</span><br><span class="line">    console.log(oEv);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="③确定具体的鼠标位置或者是键盘上的按键-每个按键对应一个keyCode-数字"><a href="#③确定具体的鼠标位置或者是键盘上的按键-每个按键对应一个keyCode-数字" class="headerlink" title="③确定具体的鼠标位置或者是键盘上的按键  每个按键对应一个keyCode 数字"></a>③确定具体的鼠标位置或者是键盘上的按键  每个按键对应一个keyCode 数字</h5><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">&#x2F;&#x2F; 作用1：确定鼠标位置</span><br><span class="line">oDiv.onclick &#x3D; function(e)&#123;</span><br><span class="line">var oEv &#x3D; e || event;</span><br><span class="line">console.log(oEv.clientX + &quot;,&quot; + oEv.clientY);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F; 作用2：确定的按键</span><br><span class="line">inp.onkeydown &#x3D; function(e)&#123;</span><br><span class="line">var oEv &#x3D; e || event;</span><br><span class="line">if(oEv.keyCode &#x3D;&#x3D; 38 || oEv.keyCode &#x3D;&#x3D; 87)&#123;</span><br><span class="line">oDiv.style.marginLeft &#x3D; &quot;200px&quot;;</span><br><span class="line">&#125;else&#123;</span><br><span class="line">alert(&quot;NO&quot;);</span><br><span class="line">&#125;</span><br><span class="line">console.log(oEv.keyCode);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="④应用案例：拖拽效果"><a href="#④应用案例：拖拽效果" class="headerlink" title="④应用案例：拖拽效果"></a>④应用案例：拖拽效果</h5><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br></pre></td><td class="code"><pre><span class="line">&lt;!DOCTYPE html&gt;</span><br><span class="line">&lt;html&gt;</span><br><span class="line">&lt;head&gt;</span><br><span class="line">&lt;title&gt;03event拖拽 &lt;&#x2F;title&gt;</span><br><span class="line">&lt;meta charset&#x3D;&quot;utf-8&quot;&gt;</span><br><span class="line">&lt;style type&#x3D;&quot;text&#x2F;css&quot;&gt;</span><br><span class="line">*&#123;margin:0px; padding: 0px;&#125;</span><br><span class="line">.div1&#123;</span><br><span class="line">width:200px;</span><br><span class="line">height: 100px;</span><br><span class="line">padding:10px;</span><br><span class="line">border:3px solid;</span><br><span class="line">background: #abcdef;</span><br><span class="line">position:absolute;</span><br><span class="line">&#125;</span><br><span class="line">&lt;&#x2F;style&gt;</span><br><span class="line">&lt;&#x2F;head&gt;</span><br><span class="line">&lt;body&gt;</span><br><span class="line">&lt;div class&#x3D;&quot;div1&quot;&gt;&lt;&#x2F;div&gt;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&lt;script type&#x3D;&quot;text&#x2F;javascript&quot;&gt;</span><br><span class="line">var oDiv &#x3D; document.getElementsByTagName(&quot;div&quot;)[0];</span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F; 效果1：按下鼠标左键，拖动div，让div的位置跟随鼠标位置的变化而变化，松开鼠标div停在当前</span><br><span class="line">&#x2F;&#x2F; oDiv.onmousedown &#x3D; function()&#123;  &#x2F;&#x2F;在div上按下左键</span><br><span class="line">&#x2F;&#x2F; document.onmousemove &#x3D; function(e)&#123;   &#x2F;&#x2F;页面中移动鼠标</span><br><span class="line">&#x2F;&#x2F; var oEv &#x3D; e || event;  &#x2F;&#x2F;处理兼容</span><br><span class="line">&#x2F;&#x2F; if(oEv.clientX &lt; 0)&#123;</span><br><span class="line">&#x2F;&#x2F; oDiv.style.left &#x3D; &quot;0px&quot;;</span><br><span class="line">&#x2F;&#x2F; &#125;else&#123;</span><br><span class="line">&#x2F;&#x2F; oDiv.style.left &#x3D; oEv.clientX + &quot;px&quot;; &#x2F;&#x2F;把鼠标离左边的距离赋值给div的left 注意加单位px</span><br><span class="line">&#x2F;&#x2F; &#125;</span><br><span class="line">&#x2F;&#x2F; if(oEv.clientY &lt; 0)&#123;</span><br><span class="line">&#x2F;&#x2F; oDiv.style.top &#x3D; &quot;0px&quot;;</span><br><span class="line">&#x2F;&#x2F; &#125;else&#123;</span><br><span class="line">&#x2F;&#x2F; oDiv.style.top &#x3D; oEv.clientY + &quot;px&quot;;&#x2F;&#x2F;把鼠标离上边的距离赋值给div的top 注意加单位px</span><br><span class="line">&#x2F;&#x2F; &#125;</span><br><span class="line">&#x2F;&#x2F; &#125;</span><br><span class="line">&#x2F;&#x2F; &#125;</span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F; &#x2F;&#x2F; 松开鼠标div停在当前</span><br><span class="line">&#x2F;&#x2F; oDiv.onmouseup &#x3D; function()&#123;</span><br><span class="line">&#x2F;&#x2F; document.onmousemove &#x3D; null;</span><br><span class="line">&#x2F;&#x2F; &#125;</span><br><span class="line"></span><br><span class="line">&#x2F;*效果2：页面中有个div鼠标按下时，移动鼠标能让div跟着鼠标走，把div移到浏览器头上，松开鼠标div停在当前的位置，且事件之间无嵌套（解决松开鼠标后，在没有按下的情况，移动鼠标div继续跑的bug，采用标记变量来实现）*&#x2F;</span><br><span class="line">&#x2F;&#x2F; var stop &#x3D; false;&#x2F;&#x2F;标记变量，记录是否移动</span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F; &#x2F;&#x2F;在div上按下左键</span><br><span class="line">&#x2F;&#x2F; oDiv.onmousedown &#x3D; function()&#123;</span><br><span class="line">&#x2F;&#x2F; stop &#x3D; true;</span><br><span class="line">&#x2F;&#x2F; &#125;  </span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F; document.onmousemove &#x3D; function(e)&#123;   &#x2F;&#x2F;页面中移动鼠标</span><br><span class="line">&#x2F;&#x2F; if(stop)&#123;</span><br><span class="line">&#x2F;&#x2F; var oEv &#x3D; e || event;  &#x2F;&#x2F;处理兼容</span><br><span class="line">&#x2F;&#x2F; if(oEv.clientX &lt; 0)&#123;</span><br><span class="line">&#x2F;&#x2F; oDiv.style.left &#x3D; &quot;0px&quot;;</span><br><span class="line">&#x2F;&#x2F; &#125;else&#123;</span><br><span class="line">&#x2F;&#x2F; oDiv.style.left &#x3D; oEv.clientX + &quot;px&quot;; &#x2F;&#x2F;把鼠标离左边的距离赋值给div的left 注意加单位px</span><br><span class="line">&#x2F;&#x2F; &#125;</span><br><span class="line">&#x2F;&#x2F; if(oEv.clientY &lt; 0)&#123;</span><br><span class="line">&#x2F;&#x2F; oDiv.style.top &#x3D; &quot;0px&quot;;</span><br><span class="line">&#x2F;&#x2F; &#125;else&#123;</span><br><span class="line">&#x2F;&#x2F; oDiv.style.top &#x3D; oEv.clientY + &quot;px&quot;;&#x2F;&#x2F;把鼠标离上边的距离赋值给div的top 注意加单位px</span><br><span class="line">&#x2F;&#x2F; &#125;</span><br><span class="line">&#x2F;&#x2F; &#125;</span><br><span class="line">&#x2F;&#x2F; &#125;</span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F; &#x2F;&#x2F; 松开鼠标div停在当前</span><br><span class="line">&#x2F;&#x2F; oDiv.onmouseup &#x3D; function()&#123;</span><br><span class="line">&#x2F;&#x2F; stop &#x3D; false;</span><br><span class="line">&#x2F;&#x2F; &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&#x2F;*效果3满足②的效果的同时，让拖动的过程中，鼠标的光标始终保持在div的中间，每次松开停下时div的大小缩小为上一次的一半，当div大小在20px以下时不再缩小*&#x2F;</span><br><span class="line"></span><br><span class="line">var stop &#x3D; false;&#x2F;&#x2F;标记变量，记录是否移动</span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F;在div上按下左键</span><br><span class="line">oDiv.onmousedown &#x3D; function()&#123;</span><br><span class="line">stop &#x3D; true;</span><br><span class="line">&#125;  </span><br><span class="line"></span><br><span class="line">document.onmousemove &#x3D; function(e)&#123;   &#x2F;&#x2F;页面中移动鼠标</span><br><span class="line">if(stop)&#123;</span><br><span class="line">var oEv &#x3D; e || event;  &#x2F;&#x2F;处理兼容</span><br><span class="line">if(oEv.clientX &lt; 0)&#123;</span><br><span class="line">oDiv.style.left &#x3D; &quot;0px&quot;;</span><br><span class="line">&#125;else&#123;</span><br><span class="line">oDiv.style.left &#x3D; (oEv.clientX-oDiv.offsetWidth&#x2F;2)+ &quot;px&quot;; &#x2F;&#x2F;把鼠标离左边的距离赋值给div的left 注意加单位px</span><br><span class="line">&#125;</span><br><span class="line">if(oEv.clientY &lt; 0)&#123;</span><br><span class="line">oDiv.style.top &#x3D; &quot;0px&quot;;</span><br><span class="line">&#125;else&#123;</span><br><span class="line">oDiv.style.top &#x3D;(oEv.clientY-oDiv.offsetHeight&#x2F;2) + &quot;px&quot;;&#x2F;&#x2F;把鼠标离上边的距离赋值给div的top 注意加单位px</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F; 松开鼠标div停在当前</span><br><span class="line">oDiv.onmouseup &#x3D; function()&#123;</span><br><span class="line">stop &#x3D; false;</span><br><span class="line">oDiv.style.width &#x3D; oDiv.offsetWidth&#x2F;2 +&quot;px&quot;;</span><br><span class="line">oDiv.style.height &#x3D; oDiv.offsetHeight&#x2F;2 +&quot;px&quot;;</span><br><span class="line">&#125;</span><br><span class="line">console.log(&quot;oDiv.offsetWidth :   &quot; + oDiv.offsetWidth);</span><br><span class="line">console.log(&quot;oDiv.clientWidth :   &quot; + oDiv.clientWidth);</span><br><span class="line">console.log(&quot;oDiv.scrollWidth :   &quot; + oDiv.scrollWidth);</span><br><span class="line">&lt;&#x2F;script&gt;</span><br><span class="line">&lt;&#x2F;body&gt;</span><br><span class="line">&lt;&#x2F;html&gt;</span><br></pre></td></tr></table></figure><h3 id="四、事件流"><a href="#四、事件流" class="headerlink" title="四、事件流"></a>四、事件流</h3><h5 id="1-定义：接收事件的顺序"><a href="#1-定义：接收事件的顺序" class="headerlink" title="1.定义：接收事件的顺序"></a>1.定义：接收事件的顺序</h5><h5 id="2-分类-事件冒泡-和-事件捕获"><a href="#2-分类-事件冒泡-和-事件捕获" class="headerlink" title="2.分类:  事件冒泡  和  事件捕获"></a>2.分类:  事件冒泡  和  事件捕获</h5><h5 id="3-事件冒泡"><a href="#3-事件冒泡" class="headerlink" title="3.事件冒泡"></a>3.事件冒泡</h5><p>①所有浏览器默认支持事件冒泡</p><p>②由最内层的标签最先接收事件，由内层往外层冒泡</p><p>③针对的是同一个事件，即子级的点击事件冒泡到父级只能触发父级的点击事件，不能触发别的，</p><p>④事件冒泡传递的是行为，事件仍然是你若触发，我便执行</p><h5 id="4-事件捕获"><a href="#4-事件捕获" class="headerlink" title="4.事件捕获"></a>4.事件捕获</h5><p>①浏览器要支持事件捕获，需要用事件监听的方式来绑定事件，并传参</p><p>②由最外层的标签最先接收事件，由外层往内层捕获</p><p>③④同上</p><h5 id="5-阻止冒泡"><a href="#5-阻止冒泡" class="headerlink" title="5.阻止冒泡"></a>5.阻止冒泡</h5><p>// 阻止冒泡处理兼容性</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">&#x2F;&#x2F; 阻止冒泡处理兼容性</span><br><span class="line">if(oEvent.stopPropagation)&#123;</span><br><span class="line">oEvent.stopPropagation();&#x2F;&#x2F;阻止冒泡，非IE浏览器适用</span><br><span class="line">&#125;else&#123;</span><br><span class="line">oEvent.cancelBubble &#x3D; true;&#x2F;&#x2F;IE浏览器适用</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="6-DOM二级事件流的顺序"><a href="#6-DOM二级事件流的顺序" class="headerlink" title="6.DOM二级事件流的顺序"></a>6.DOM二级事件流的顺序</h5><p>捕获阶段——目标阶段——冒泡阶段</p><p>先捕获，最后冒泡，在目标阶段是先捕获还是先冒泡取决于书写的顺序</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br></pre></td><td class="code"><pre><span class="line">&lt;!DOCTYPE html&gt;</span><br><span class="line">&lt;html&gt;</span><br><span class="line">&lt;head&gt;</span><br><span class="line">&lt;meta charset&#x3D;&quot;UTF-8&quot;&gt;</span><br><span class="line">&lt;title&gt;事件流&lt;&#x2F;title&gt;</span><br><span class="line">&lt;style&gt;</span><br><span class="line">#wrap &#123;</span><br><span class="line">  width: 200px;</span><br><span class="line">  height: 200px;</span><br><span class="line">  background: orange;</span><br><span class="line">&#125;</span><br><span class="line">#outer &#123;</span><br><span class="line">  position: relative;</span><br><span class="line">  top: 50px;</span><br><span class="line">  left: 50px;</span><br><span class="line">  width: 100px;</span><br><span class="line">  height: 100px;</span><br><span class="line">  background: #eeddff;</span><br><span class="line">&#125;</span><br><span class="line">#inner &#123;</span><br><span class="line">  position: relative;</span><br><span class="line">  top: 25px;</span><br><span class="line">  left:25px;</span><br><span class="line">  width: 50px;</span><br><span class="line">  height: 50px;</span><br><span class="line">  background: #44ddff;</span><br><span class="line">&#125;</span><br><span class="line">&lt;&#x2F;style&gt;</span><br><span class="line">&lt;&#x2F;head&gt;</span><br><span class="line">&lt;body&gt;</span><br><span class="line"></span><br><span class="line">&lt;div id&#x3D;&quot;wrap&quot;&gt;</span><br><span class="line">    &lt;div id&#x3D;&quot;outer&quot;&gt;</span><br><span class="line">      &lt;div id&#x3D;&quot;inner&quot;&gt;&lt;&#x2F;div&gt;</span><br><span class="line">    &lt;&#x2F;div&gt;</span><br><span class="line">    &lt;&#x2F;div&gt;</span><br><span class="line">&lt;script&gt;</span><br><span class="line">&#x2F;&#x2F; 1.获取节点</span><br><span class="line">var wrap &#x3D; document.getElementById(&#39;wrap&#39;);</span><br><span class="line">var outer &#x3D; document.getElementById(&#39;outer&#39;);</span><br><span class="line">var inner &#x3D; document.getElementById(&#39;inner&#39;);</span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F; 2.冒泡</span><br><span class="line">wrap.addEventListener(&#39;click&#39;,function()&#123;</span><br><span class="line">  alert(&#39;789&#39;);</span><br><span class="line">&#125;,false);</span><br><span class="line"></span><br><span class="line">outer.addEventListener(&#39;click&#39;,function()&#123;</span><br><span class="line">  alert(&#39;456&#39;);</span><br><span class="line">&#125;,false);</span><br><span class="line"></span><br><span class="line">inner.addEventListener(&#39;click&#39;,function()&#123;</span><br><span class="line">  alert(&#39;123&#39;);</span><br><span class="line">&#125;,false);</span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F; 3.捕获</span><br><span class="line">wrap.addEventListener(&#39;click&#39;,function()&#123;</span><br><span class="line">  alert(&#39;wrap&#39;);</span><br><span class="line">&#125;,true);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">outer.addEventListener(&#39;click&#39;,function()&#123;</span><br><span class="line">  alert(&#39;outer&#39;);</span><br><span class="line">&#125;,true);</span><br><span class="line"></span><br><span class="line">inner.addEventListener(&#39;click&#39;,function()&#123;</span><br><span class="line">  alert(&#39;inner&#39;);</span><br><span class="line">&#125;,true);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F; DOM 二级事件流</span><br><span class="line">&#x2F;*捕获阶段——目标阶段——冒泡阶段*&#x2F;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&#x2F;* 当点击页面中心浅蓝色部分的时候，先从最不具体的节点捕获事件，先弹出wrap,接着弹出outer。接着处于目标阶段，先弹出123，再弹出inner。紧接着，事件处于冒泡阶段，先弹出456，再弹出789。因此我们可以得出结论，当容器元素及嵌套元素，即在捕获阶段又在冒泡阶段调用事件处理程序时：事件按DOM事件流的顺序执行事件处理程序，</span><br><span class="line">且当事件处于目标阶段时，事件调用顺序决定于绑定事件的书写顺序，按上面的例子为，先调用冒泡阶段的事件处理程序，再调用捕获阶段的事件处理程序。如果把捕获阶段的事件在编辑器上写在冒泡的前面，处于目标阶段，先弹出inner，再弹出123*&#x2F;</span><br><span class="line">&lt;&#x2F;script&gt;</span><br><span class="line">&lt;&#x2F;body&gt;</span><br><span class="line">&lt;&#x2F;html&gt;</span><br></pre></td></tr></table></figure><h4 id="五、绑定事件的方法"><a href="#五、绑定事件的方法" class="headerlink" title="五、绑定事件的方法"></a>五、绑定事件的方法</h4><p>法1： 声明有名函数，在标签内调用 语法： 事件名=”函数名()”</p><p>法2：在js内获取节点，给节点加事件，后面绑定匿名函数</p><p>法3：事件监听 语法：节点.addEventListener(“事件名不加on” ，函数名或匿名函数，布尔值) </p><h4 id="六、事件监听"><a href="#六、事件监听" class="headerlink" title="六、事件监听"></a>六、事件监听</h4><h5 id="1-定义："><a href="#1-定义：" class="headerlink" title="1.定义："></a>1.定义：</h5><p>绑定事件的法3</p><h5 id="2-优点"><a href="#2-优点" class="headerlink" title="2.优点"></a>2.优点</h5><p>①可以在同一个节点上绑定相同的事件，多次  都会生效    绑定事件的法1法2只能生效最后一次</p><p>②可以移除事件</p><h5 id="3-事件监听和移除的函数封装"><a href="#3-事件监听和移除的函数封装" class="headerlink" title="3.事件监听和移除的函数封装"></a>3.事件监听和移除的函数封装</h5><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">&#x2F;&#x2F;绑定监听事件</span><br><span class="line">&#x2F;&#x2F;1.函数功能：绑定事件</span><br><span class="line">&#x2F;&#x2F;2.参数：</span><br><span class="line">&#x2F;&#x2F;target：表示是节点对象</span><br><span class="line">&#x2F;&#x2F;type：事件类型    事件名，是字符串 ，不加on</span><br><span class="line">&#x2F;&#x2F;fn：事件触发后执行的函数</span><br><span class="line">&#x2F;&#x2F;3.有无返回值：无</span><br><span class="line">function addEventHandler(target,type,fn)&#123;</span><br><span class="line">    if(target.addEventListener)&#123;</span><br><span class="line"> target.addEventListener(type,fn);&#x2F;&#x2F;非IE</span><br><span class="line"> &#125;else&#123;</span><br><span class="line"> target.attachEvent(&quot;on&quot;+type,fn);&#x2F;&#x2F;IE</span><br><span class="line"> &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F;移除监听事件</span><br><span class="line">&#x2F;&#x2F;1.函数功能：移除监听事件</span><br><span class="line">&#x2F;&#x2F;&#x2F;&#x2F;target：表示是节点对象</span><br><span class="line">&#x2F;&#x2F;type：事件类型</span><br><span class="line">&#x2F;&#x2F;fn：事件触发后执行的函数</span><br><span class="line">&#x2F;&#x2F;3.有无返回值：无</span><br><span class="line">function removeEventHandler(target,type,fn)&#123;</span><br><span class="line">if(target.removeEventListener)&#123;</span><br><span class="line">target.removeEventListener(type,fn);&#x2F;&#x2F;非IE</span><br><span class="line">&#125;else&#123;</span><br><span class="line"> target.detachEvent(&quot;on&quot;+type,fn);&#x2F;&#x2F;IE</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="七、默认行为"><a href="#七、默认行为" class="headerlink" title="七、默认行为"></a>七、默认行为</h4><h5 id="1-定义-2"><a href="#1-定义-2" class="headerlink" title="1.定义"></a>1.定义</h5><p>浏览器的行为，如点击右键，出现菜单，a标签上的点击跳转</p><h5 id="2-阻止默认行为"><a href="#2-阻止默认行为" class="headerlink" title="2.阻止默认行为"></a>2.阻止默认行为</h5><p> return false  放在函数的最后一行    </p><p>事件名：oncontextmenu 点击鼠标右键触发   内容菜单事件</p><h4 id="八、事件委托-代理"><a href="#八、事件委托-代理" class="headerlink" title="八、事件委托/代理"></a>八、事件委托/代理</h4><h5 id="1-定义-3"><a href="#1-定义-3" class="headerlink" title="1.定义"></a>1.定义</h5><p>利用冒泡原理，把事件加在父级或祖先上</p><h5 id="2-写法"><a href="#2-写法" class="headerlink" title="2.写法"></a>2.写法</h5><h5 id="3-优点"><a href="#3-优点" class="headerlink" title="3.优点"></a>3.优点</h5><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br></pre></td><td class="code"><pre><span class="line">&lt;!DOCTYPE html&gt;</span><br><span class="line">&lt;html&gt;</span><br><span class="line">&lt;head&gt;</span><br><span class="line">&lt;title&gt;事件委托的优点&lt;&#x2F;title&gt;</span><br><span class="line">&lt;meta charset&#x3D;&quot;utf-8&quot;&gt;</span><br><span class="line">&lt;style type&#x3D;&quot;text&#x2F;css&quot;&gt;</span><br><span class="line">#list&#123;font-size: 40px;line-height:60px;width:400px;margin:50px auto; border: 2px solid;&#125;</span><br><span class="line">#list li&#123;list-style: none;height: 60px;margin:20px;border: 2px solid red;&#125;</span><br><span class="line">&lt;&#x2F;style&gt;</span><br><span class="line">&lt;&#x2F;head&gt;</span><br><span class="line">&lt;body&gt;</span><br><span class="line"></span><br><span class="line">&lt;ul id&#x3D;&quot;list&quot;&gt;</span><br><span class="line"> &lt;li id&#x3D;&quot;L1&quot; &gt;第1111111个&lt;&#x2F;li&gt;</span><br><span class="line"> &lt;li id&#x3D;&quot;L2&quot; &gt;第2222222个&lt;&#x2F;li&gt;</span><br><span class="line"> &lt;li id&#x3D;&quot;L3&quot; &gt;第3333333个&lt;&#x2F;li&gt;</span><br><span class="line">&lt;&#x2F;ul&gt;</span><br><span class="line"></span><br><span class="line">&lt;!-- 封装的功能性函数放到一个js文件中，直接调用即可 --&gt;</span><br><span class="line">&lt;script src &#x3D;&quot;fun.js&quot;&gt;&lt;&#x2F;script&gt;</span><br><span class="line"></span><br><span class="line"> &lt;!-- 传统写法 --&gt;</span><br><span class="line"> &lt;script&gt;</span><br><span class="line">var list &#x3D; document.getElementById(&quot;list&quot;);</span><br><span class="line">&#x2F;&#x2F; 1.获取所有li</span><br><span class="line">var oLi &#x3D; list.getElementsByTagName(&quot;li&quot;);</span><br><span class="line">&#x2F;&#x2F; 2.for循环每个li，加点击事件</span><br><span class="line">console.log(oLi.length);</span><br><span class="line">&#x2F;&#x2F;3，获取的节点只是HTML文档中原有节点，无js添加的</span><br><span class="line"></span><br><span class="line">console.time(&quot;a&quot;);&#x2F;&#x2F;标记计时的开始</span><br><span class="line">for (var i &#x3D;0; i&lt; oLi.length; i++) &#123;</span><br><span class="line">&#x2F;*oLi[i].onclick &#x3D; function()&#123;</span><br><span class="line">console.log(this.innerHTML);</span><br><span class="line">&#125;*&#x2F;</span><br><span class="line">addEventHandler(oLi[i],&quot;click&quot;,con);</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">function con()&#123;</span><br><span class="line">console.log(this.innerHTML);</span><br><span class="line">&#125;</span><br><span class="line">console.timeEnd(&quot;a&quot;);&#x2F;&#x2F;标记计时的结束</span><br><span class="line"></span><br><span class="line">&#x2F;*&#x2F;&#x2F; js动态添加节点，添加后</span><br><span class="line">var L4 &#x3D; document.createElement(&quot;li&quot;);</span><br><span class="line">L4.innerHTML &#x3D; &quot;item4&quot;;</span><br><span class="line">list.appendChild(L4);</span><br><span class="line">*&#x2F;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F; 注意：此时事件加在li上 </span><br><span class="line">&lt;&#x2F;script&gt;  </span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&lt;!-- 事件委托的写法 --&gt;</span><br><span class="line">&lt;script&gt;</span><br><span class="line">var list &#x3D; document.getElementById(&quot;list&quot;);</span><br><span class="line">console.time(&quot;b&quot;);&#x2F;&#x2F;标记计时的开始</span><br><span class="line"></span><br><span class="line">list.addEventListener(&quot;click&quot;,function(event)&#123;</span><br><span class="line"> var jieDian &#x3D; event.target;&#x2F;&#x2F;event.target指event对象的目标元素</span><br><span class="line"> console.log(&quot; 事件委托的写法&quot;+jieDian.innerHTML); </span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line">console.timeEnd(&quot;b&quot;);&#x2F;&#x2F;测试运行时间的结束</span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F; js动态添加节点，添加后</span><br><span class="line"></span><br><span class="line">&#x2F;*var L4 &#x3D; document.createElement(&quot;li&quot;);</span><br><span class="line">L4.innerHTML &#x3D; &quot;item4&quot;;</span><br><span class="line">list.appendChild(L4);*&#x2F;</span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F; 注意：此时事件加在document上  document是li的祖先元素</span><br><span class="line">&lt;&#x2F;script&gt;  </span><br><span class="line">&lt;&#x2F;body&gt;</span><br><span class="line">&lt;&#x2F;html&gt;</span><br></pre></td></tr></table></figure><h1 id="第九章-面向对象"><a href="#第九章-面向对象" class="headerlink" title="第九章   面向对象"></a>第九章   面向对象</h1><h3 id="一、相关概念"><a href="#一、相关概念" class="headerlink" title="一、相关概念"></a>一、相关概念</h3><p>1.面向对象  定义  作用  实现方式</p><p>2.面向对象的特征：封装 继承 多态</p><h3 id="二、对象"><a href="#二、对象" class="headerlink" title="二、对象"></a>二、对象</h3><p>1.对象本质是特殊的数据类型<br>复习：数据类型分为值类型（5种）  引用类型</p><p>typeof() 检测出来的数据类型  6种   undefined  object  number  boolean  string  function</p><p>2.对象有属性和方法</p><p>属性：是固有的特征 （物品的尺寸，颜色等，如div的宽高，背景色等）</p><p>方法：能做什么（实现什么功能）</p><p>属性和方法都有可扩展性</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line">var today &#x3D; new Date()；&#x2F;&#x2F;创建日期对象</span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F;给today对象扩展一个name的属性</span><br><span class="line">today.name &#x3D; &quot;光棍节&quot;</span><br><span class="line">console.log(today.name);&#x2F;&#x2F;&quot;光棍节&quot;</span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F;给today对象扩展一个say方法</span><br><span class="line">today.say &#x3D; function()&#123;alert(&quot;星期&quot;+this.getDay())&#125;</span><br><span class="line">today.say()&#x2F;&#x2F;可以调用</span><br><span class="line"></span><br><span class="line">&lt;!-- 循环对象 --&gt;</span><br><span class="line">&lt;script type&#x3D;&quot;text&#x2F;javascript&quot;&gt;</span><br><span class="line">var peo &#x3D; &#123;</span><br><span class="line">name:&quot;张三&quot;,</span><br><span class="line">age:28,</span><br><span class="line">tall:185,</span><br><span class="line">sex:&quot;man&quot;,</span><br><span class="line">say:function()&#123;</span><br><span class="line">console.log(this.name);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">for(prop in peo)&#123;</span><br><span class="line">console.log(prop);&#x2F;&#x2F;属性名</span><br><span class="line">console.log(peo[prop]);&#x2F;&#x2F;属性值</span><br><span class="line">&#125;</span><br><span class="line">&lt;&#x2F;script&gt;</span><br></pre></td></tr></table></figure><h3 id="三、this对象"><a href="#三、this对象" class="headerlink" title="三、this对象"></a>三、this对象</h3><p>1.含义：当前对象</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br></pre></td><td class="code"><pre><span class="line">&lt;!DOCTYPE html&gt;</span><br><span class="line">&lt;html&gt;</span><br><span class="line">&lt;head&gt;</span><br><span class="line">&lt;title&gt;this对象&lt;&#x2F;title&gt;</span><br><span class="line">&lt;meta charset&#x3D;&quot;utf-8&quot;&gt;</span><br><span class="line">&lt;&#x2F;head&gt;</span><br><span class="line">&lt;body&gt;</span><br><span class="line">&lt;!-- 在标签内调用函数  this this指向window --&gt;</span><br><span class="line">&lt;!-- &lt;button onclick&#x3D;&quot;window.fn()&quot;&gt;点我&lt;&#x2F;button&gt;</span><br><span class="line">&lt;button&gt;点222&lt;&#x2F;button&gt; --&gt;</span><br><span class="line"></span><br><span class="line">&lt;button  onclick&#x3D;&quot;changeBgColor(this,&#39;red&#39;)&quot;&gt;变红&lt;&#x2F;button&gt;</span><br><span class="line">&lt;button onclick&#x3D;&quot;changeBgColor(this,&#39;green&#39;)&quot;&gt;变绿&lt;&#x2F;button&gt;</span><br><span class="line">&lt;button onclick&#x3D;&quot;changeBgColor(this,&#39;blue&#39;)&quot;&gt;变蓝&lt;&#x2F;button&gt;</span><br><span class="line"></span><br><span class="line">&lt;script type&#x3D;&quot;text&#x2F;javascript&quot;&gt;</span><br><span class="line">&#x2F;&#x2F; 1.this 默认指向window对象</span><br><span class="line">&#x2F;&#x2F; console.log(this);</span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F; &#x2F;&#x2F; 2.谁调用属性和方法，谁就是当前对象this</span><br><span class="line">&#x2F;&#x2F; function fn()&#123;</span><br><span class="line">&#x2F;&#x2F; console.log(this);</span><br><span class="line">&#x2F;&#x2F; &#125;</span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F; window.fn();&#x2F;&#x2F;this指向window</span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F; var btn2 &#x3D; document.getElementsByTagName(&quot;button&quot;)[1];</span><br><span class="line">&#x2F;&#x2F; &#x2F;&#x2F; console.log(btn2)</span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F; btn2.onclick &#x3D; fn;&#x2F;&#x2F;this指向btn2</span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F; btn2.onclick &#x3D; function()&#123;</span><br><span class="line">&#x2F;&#x2F; console.log(this); &#x2F;&#x2F;this指向btn2</span><br><span class="line">&#x2F;&#x2F; &#125;</span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F; btn2.addEventListener(&quot;dblclick&quot;,fn)&#x2F;&#x2F;this指向btn2</span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F; 需求：封装函数实现点击对应的颜色按钮，动态更改相应按钮的背景颜色的功能 </span><br><span class="line">&#x2F;&#x2F; 函数功能：改变背景色</span><br><span class="line">&#x2F;&#x2F; 参数</span><br><span class="line">&#x2F;&#x2F; obj  节点对象    节点变量名</span><br><span class="line">&#x2F;&#x2F; color：颜色值    颜色值 字符串</span><br><span class="line">&#x2F;&#x2F; 有无返回值：无</span><br><span class="line">function changeBgColor(obj,color)&#123;</span><br><span class="line">obj.style.background &#x3D; color;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F; var btns &#x3D; document.getElementsByTagName(&quot;button&quot;);</span><br><span class="line"></span><br><span class="line">    &#x2F;&#x2F; 法1：列举法</span><br><span class="line">&#x2F;*btns[0].onclick &#x3D; function()&#123;</span><br><span class="line">changeBgColor(btns[0],&quot;red&quot;);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">btns[1].onclick &#x3D; function()&#123;</span><br><span class="line">changeBgColor(btns[1],&quot;green&quot;);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">btns[2].onclick &#x3D; function()&#123;</span><br><span class="line">changeBgColor(btns[2],&quot;blue&quot;);</span><br><span class="line">&#125;*&#x2F;</span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F; 法2：数组 + for   可维护性好</span><br><span class="line">&#x2F;*var colorArr &#x3D; [&quot;red&quot;,&quot;green&quot;,&quot;blue&quot;]</span><br><span class="line">for(var i&#x3D;0;i&lt;btns.length;i++)&#123;</span><br><span class="line">btns[i].suoYin &#x3D; i;</span><br><span class="line">btns[i].onclick &#x3D; function()&#123;</span><br><span class="line">changeBgColor(btns[this.suoYin],colorArr[this.suoYin]);</span><br><span class="line">&#125;</span><br><span class="line">&#125;*&#x2F;</span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F; 法3：直接在标签内写事件 调用全局函数changeBgColor   代码简洁</span><br><span class="line">&lt;&#x2F;script&gt;</span><br><span class="line">&lt;&#x2F;body&gt;</span><br><span class="line">&lt;&#x2F;html&gt;</span><br></pre></td></tr></table></figure><h3 id="四、创建对象"><a href="#四、创建对象" class="headerlink" title="四、创建对象"></a>四、创建对象</h3><h5 id="1-创建对象的方法；"><a href="#1-创建对象的方法；" class="headerlink" title="1.创建对象的方法；"></a>1.创建对象的方法；</h5><p>方法1：new + 构造函数</p><p>方法2：var 对象名 = {键1：值1，键2：值2，键3：值3……..}   字面量方法  是法1的语法糖</p><h5 id="2-定义："><a href="#2-定义：" class="headerlink" title="2.定义："></a>2.定义：</h5><p>有限的无序的键值对集合，用属性和方法直观的描述一个事物，对事物的抽象概括</p><p>例子：身份证</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br></pre></td><td class="code"><pre><span class="line">&lt;!DOCTYPE html&gt;</span><br><span class="line">&lt;html&gt;</span><br><span class="line">&lt;head&gt;</span><br><span class="line">&lt;title&gt;02对象&lt;&#x2F;title&gt;</span><br><span class="line">&lt;meta charset&#x3D;&quot;utf-8&quot;&gt;</span><br><span class="line">&lt;&#x2F;head&gt;</span><br><span class="line">&lt;body&gt;</span><br><span class="line">&lt;script type&#x3D;&quot;text&#x2F;javascript&quot;&gt;</span><br><span class="line">&#x2F;&#x2F; 1.构造函数方法创建对象</span><br><span class="line">var peo1 &#x3D; new Object();</span><br><span class="line"></span><br><span class="line">peo1.name &#x3D; &quot;韦小宝&quot;;</span><br><span class="line">peo1.sex &#x3D; &quot;男&quot;;</span><br><span class="line">peo1.nation &#x3D; &quot;汉&quot;;</span><br><span class="line"></span><br><span class="line">console.log(peo1)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F; 2.字面量的方法创建对象</span><br><span class="line">var peo2 &#x3D; &#123;</span><br><span class="line">name:&quot;韦小宝&quot;,</span><br><span class="line">sex:&quot;男&quot;,</span><br><span class="line">nation:&quot;汉&quot;,</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F; 3.不同的业务逻辑需求的键值对不同</span><br><span class="line">&#x2F;&#x2F; 找工作</span><br><span class="line">var workPeo &#x3D; &#123;</span><br><span class="line">name:&quot;黄祥&quot;,</span><br><span class="line">sex:&quot;man&quot;,</span><br><span class="line">age:18,</span><br><span class="line">edu:&quot;大专&quot;,</span><br><span class="line">post:&quot;前端开发工程师&quot;,</span><br><span class="line">canDo:function()&#123;</span><br><span class="line">console.log(&quot;HTML+CSS+H5+C3+JS+JQ+BS4+eleui+vue+uniapp+微信小程序&quot;)</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F; 找朋友</span><br><span class="line">var findFriendPeo &#x3D; &#123;</span><br><span class="line">name:&quot;黄祥&quot;,</span><br><span class="line">homeTown：&quot;洪湖&quot;,</span><br><span class="line">canDo:function()&#123;</span><br><span class="line">console.log(&quot;唱跳rape&quot;)</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&lt;&#x2F;script&gt;</span><br><span class="line"></span><br><span class="line">&lt;&#x2F;body&gt;</span><br><span class="line">&lt;&#x2F;html&gt;</span><br></pre></td></tr></table></figure><h5 id="3-对象属性、方法-增删改查"><a href="#3-对象属性、方法-增删改查" class="headerlink" title="3.对象属性、方法 增删改查"></a>3.对象属性、方法 增删改查</h5><p>①查看 ：用 点号 或者 [“”] ,属性名是数字只能用[“”],没有找到该属性，返回结果是undefined</p><p>例子：查看年龄</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">var peo &#x3D; &#123;</span><br><span class="line">name:&quot;zhang&quot;,</span><br><span class="line">age:18,</span><br><span class="line">1314:&quot;一生一世&quot;</span><br><span class="line">&#125;</span><br><span class="line">peo.age √</span><br><span class="line">peo[&quot;age&quot;] √</span><br><span class="line">peo.1314   ×</span><br><span class="line">peo[1314]  √</span><br><span class="line">peo[“1314”]  √</span><br><span class="line">peo.tall  undefined</span><br></pre></td></tr></table></figure><p>②修改属性 :将需要修改的属性重新赋值即可</p><p>只要能够取值就能重新赋值，字符串除外</p><p>③增加属性：增加一个键值对即可 可以在对象里面直接写键值对，也可以赋值  peo[“tall”] = “185cm”</p><p>④删除属性  用  delete  对象名.属性名    返回的结果是布尔值  true表示可以删除   false表示不可以删除–变量</p><h5 id="4-特殊的对象：JSON对象"><a href="#4-特殊的对象：JSON对象" class="headerlink" title="4.特殊的对象：JSON对象"></a>4.特殊的对象：JSON对象</h5><h3 id="五、工厂模式"><a href="#五、工厂模式" class="headerlink" title="五、工厂模式"></a>五、工厂模式</h3><h5 id="1-定义-4"><a href="#1-定义-4" class="headerlink" title="1.定义"></a>1.定义</h5><p>是一种设计模式，抽象了创建对象的细节，用函数将其封装</p><h5 id="2-例子"><a href="#2-例子" class="headerlink" title="2.例子"></a>2.例子</h5><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">&#x2F;&#x2F; 需要创建多个对象，可以使用工厂模式</span><br><span class="line">function phone(hao,se)&#123;</span><br><span class="line">&#x2F;&#x2F; 1.封装创建对象的细节</span><br><span class="line">var play &#x3D; &#123;</span><br><span class="line">name:hao,</span><br><span class="line">color:se,</span><br><span class="line">say:function()&#123;</span><br><span class="line">console.log(this.name + this.color + &quot;会滴滴叫&quot;);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">return play;&#x2F;&#x2F;2.出厂</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F; 3.直接调用函数 传参，创建好对象</span><br><span class="line">var phone1 &#x3D; phone(&quot;001&quot;,&quot;red&quot;);</span><br><span class="line">var phone2 &#x3D; phone(&quot;002&quot;,&quot;green&quot;);</span><br><span class="line">console.log(phone2);</span><br></pre></td></tr></table></figure><h5 id="3-弊端"><a href="#3-弊端" class="headerlink" title="3.弊端"></a>3.弊端</h5><p>①看不出类型  —- 构造函数解决</p><p>②资源浪费 —–原型和原型链解决</p><h3 id="六、构造函数"><a href="#六、构造函数" class="headerlink" title="六、构造函数"></a>六、构造函数</h3><h5 id="1-创建对象-var-对象名-new-Object-Object-是js内置的构造函数，创建的是一个空对象，需要重新赋属性"><a href="#1-创建对象-var-对象名-new-Object-Object-是js内置的构造函数，创建的是一个空对象，需要重新赋属性" class="headerlink" title="1.创建对象  var 对象名 = new Object()    Object()是js内置的构造函数，创建的是一个空对象，需要重新赋属性"></a>1.创建对象  var 对象名 = new Object()    Object()是js内置的构造函数，创建的是一个空对象，需要重新赋属性</h5><h5 id="2-创建自定义的对象-首先要封装自定义的构造函数，相同逻辑封装到函数内，不同内容传参，再用new-调用构造函数"><a href="#2-创建自定义的对象-首先要封装自定义的构造函数，相同逻辑封装到函数内，不同内容传参，再用new-调用构造函数" class="headerlink" title="2.创建自定义的对象    首先要封装自定义的构造函数，相同逻辑封装到函数内，不同内容传参，再用new 调用构造函数"></a>2.创建自定义的对象    首先要封装自定义的构造函数，相同逻辑封装到函数内，不同内容传参，再用new 调用构造函数</h5><h5 id="3-和函数的区别"><a href="#3-和函数的区别" class="headerlink" title="3.和函数的区别"></a>3.和函数的区别</h5><p>①首字母要大写</p><p>②构造函数是用于创建对象的，函数是为了实现一定的功能的</p><h5 id="4-和工厂模式的区别"><a href="#4-和工厂模式的区别" class="headerlink" title="4.和工厂模式的区别"></a>4.和工厂模式的区别</h5><p>①没有显示创建对象</p><p>②将属性和方法都赋值给了this对象</p><p>③没有return</p><h5 id="5-用构造函数来创建对象的具体步骤（面试题）"><a href="#5-用构造函数来创建对象的具体步骤（面试题）" class="headerlink" title="5.用构造函数来创建对象的具体步骤（面试题）"></a>5.用构造函数来创建对象的具体步骤（面试题）</h5><p>①在构造函数内隐式创建一个this对象   var  this= {}</p><p>②将属性和方法赋值给this对象</p><p>③在构造函数内最后一行隐式返回this   即 return  this</p><p>④创建对象实例时，是将this赋值给了对象实例 </p><h3 id="七-原型-原型链"><a href="#七-原型-原型链" class="headerlink" title="七 原型/原型链"></a>七 原型/原型链</h3><p>1.每个函数都有一个原型属性（prototype 显式原型），这个属性也是一个对象，称为原型对象</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">构造函数</span><br><span class="line">function Peo()&#123;&#125;</span><br><span class="line">显式原型</span><br><span class="line">Peo.prototype &#x3D; &#123;&#125;</span><br></pre></td></tr></table></figure><p>2.原型对象内放由这个构造函数创建的所有实例化对象   共享的属性和方法</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">构造函数</span><br><span class="line">function Peo(name,age)&#123;</span><br><span class="line">this.name &#x3D; name;</span><br><span class="line">this.age &#x3D; age;</span><br><span class="line">&#125;</span><br><span class="line">原型对象</span><br><span class="line">Peo.prototype &#x3D; &#123;</span><br><span class="line">共享的属性和方法</span><br><span class="line">sex:&quot;man&quot;,</span><br><span class="line">show:function()&#123;</span><br><span class="line">console.log(this.name + &quot;今年&quot; + this.age);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F; 对象实例</span><br><span class="line">var peo1 &#x3D; new Peo(&quot;张三丰&quot;,300);</span><br><span class="line">var peo2 &#x3D; new Peo(&quot;王二小&quot;,80);</span><br></pre></td></tr></table></figure><p>3.每个对象实例 也有原型（叫隐式原型）</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">__proto__</span><br></pre></td></tr></table></figure><p>4.原型链</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">&#x2F;&#x2F; 原型链</span><br><span class="line">function Graden()&#123;</span><br><span class="line">this.xing &#x3D; &quot;zhu&quot;</span><br><span class="line">&#125;;</span><br><span class="line">var g1 &#x3D; new Graden();</span><br><span class="line"></span><br><span class="line">function Father()&#123;&#125;;</span><br><span class="line">Father.prototype &#x3D; g1;</span><br><span class="line">var f1 &#x3D; new Father()</span><br><span class="line"></span><br><span class="line">function Son()&#123;&#125;;</span><br><span class="line">Son.prototype &#x3D; f1;</span><br><span class="line"></span><br><span class="line">var son1 &#x3D; new Son();</span><br><span class="line">console.log(son1.xing)&#x2F;&#x2F;zhu</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;js复习第二部分&quot;&gt;&lt;a href=&quot;#js复习第二部分&quot; class=&quot;headerlink&quot; title=&quot;js复习第二部分&quot;&gt;&lt;/a&gt;js复习第二部分&lt;/h1&gt;
    
    </summary>
    
    
    
  </entry>
  
  <entry>
    <title>搭建 hexo 博客</title>
    <link href="http://yoursite.com/2020/05/12/%E6%90%AD%E5%BB%BA%20hexo%20%E5%8D%9A%E5%AE%A2/"/>
    <id>http://yoursite.com/2020/05/12/%E6%90%AD%E5%BB%BA%20hexo%20%E5%8D%9A%E5%AE%A2/</id>
    <published>2020-05-12T06:59:53.962Z</published>
    <updated>2020-05-13T12:56:51.762Z</updated>
    
    <content type="html"><![CDATA[<h1 id="搭建hexo博客"><a href="#搭建hexo博客" class="headerlink" title="搭建hexo博客"></a>搭建hexo博客</h1><a id="more"></a><hr><p>title: 搭建hexo博客<br>top: 5</p><hr><h2 id="1、前言"><a href="#1、前言" class="headerlink" title="1、前言"></a><strong>1、前言</strong></h2><p>​    <span style="color:red">作为一名 web 工作者来说，有一个自己的博客胜似一份好的简历，多说无益,来和我一起创造出一个属于自己的专属博客吧</span></p><p>​    <strong>静态博客：</strong>是指 <span style='color:red'>没有后端数据库</span>的博客，所有文章都是以<span style='color:red'> 文件 </span>的形式存储，是一种 <span style='color:red'>纯前端</span> 的博客框架。</p><h2 id="2、安装"><a href="#2、安装" class="headerlink" title="2、安装"></a>2、安装</h2><p>​    <strong>虽然安装很烦，但是都是逃不掉的 (<em>^▽^</em>)</strong></p><h3 id="1-从安装-node-js-开始"><a href="#1-从安装-node-js-开始" class="headerlink" title="(1).    从安装 node.js 开始"></a>(1).    从安装 node.js 开始</h3><p>​        因为Hexo是通过Node.js生成的，所以首先需要根据自己的操作系统版本<a href="https://nodejs.org/en/download/" target="_blank" rel="noopener">下载</a>并安装Node.js。</p><p>​        根据步骤提示进行操作后，在item（Windows是cmd）中输入命令：</p><p>​        <span style="color:red"><code>node -v</code></span></p><p>​        如果能正确显示Node.js版本，则说明安装成功。</p><p>​        <img src="C:%5CUsers%5C%E5%88%98%E6%96%87%E5%BA%B7%5CAppData%5CRoaming%5CTypora%5Ctypora-user-images%5C1589245992645.png" alt="1589245992645"></p><h3 id="2-通过-node-js-安装-hexo-框架"><a href="#2-通过-node-js-安装-hexo-框架" class="headerlink" title="(2). 通过 node.js 安装 hexo 框架"></a>(2). 通过 node.js 安装 hexo 框架</h3><p>​        <strong>注：</strong>Node.js安装成功后，同时会自动安装一个包管理器，称为&lt;span <b style="color:red">npm（Node Package Manager）。</b></p><p><span style="color:red">                   安装：<code>npm install -g hexo-cl</code></span></p><p><span style="color:red">                   查看版本：<code>hexo -v</code></span></p><p><img src="C:%5CUsers%5C%E5%88%98%E6%96%87%E5%BA%B7%5CAppData%5CRoaming%5CTypora%5Ctypora-user-images%5C1589246341041.png" alt="1589246341041"></p><p><strong>重点：</strong></p><p>​    由于npm代码仓库的服务器在国外，由于Great Firewall的缘故，下载速度可能不尽如人意，这时你可以使用淘宝的npm代码仓库，通过npm安装cnpm：</p><p><span style="color:red"><code>npm install -g cnpm --registry=https://registry.npm.taobao.org</code></span></p><p>安装成功后，可以通过以下命令查看cnpm版本：</p><p><span style="color:red"><code>cnpm -v</code></span></p><h3 id="3-安装-hexo-激动的时刻"><a href="#3-安装-hexo-激动的时刻" class="headerlink" title="(3). 安装 hexo (激动的时刻)"></a>(3). 安装 hexo (激动的时刻)</h3><h4 id="i-创建目录"><a href="#i-创建目录" class="headerlink" title="i. 创建目录"></a>i. 创建目录</h4><p>Hexo的所有文章都是以文件的形式存储在目录下的，所以首先需要新建一个目录，我的是<code>Hexo</code>，在此目录下操作。</p><h4 id="ii-初始化博客"><a href="#ii-初始化博客" class="headerlink" title="ii. 初始化博客"></a>ii. 初始化博客</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">hexo init</span><br></pre></td></tr></table></figure><h4 id="iii-新建文章"><a href="#iii-新建文章" class="headerlink" title="iii. 新建文章"></a>iii. 新建文章</h4><p><code>hexo new &quot;BlogName&quot;</code>（BlogName是你的文章名称）<br>会在<code>source/_posts</code>目录下生成BlogName.md文件，可以vim或其他Markdown编辑器进行修改。</p><h4 id="iv-生成博客静态文件"><a href="#iv-生成博客静态文件" class="headerlink" title="iv. 生成博客静态文件"></a>iv. 生成博客静态文件</h4><p><code>hexo g</code>（g代表generate），生成博客<strong>静态文件</strong><br>每次修改文章后，都需要通过<code>hexo clean</code>清理一下，<br>然后通过<code>hexo g</code>重新生成，<br>最后也不要忘了通过<code>hexo s</code>重新启动Hexo。</p><h4 id="v-启动博客"><a href="#v-启动博客" class="headerlink" title="v. 启动博客"></a>v. 启动博客</h4><p><code>hexo s</code>（s代表server，默认端口号是<strong>4000</strong>）</p><p><b style="color:red">每次修改后，都需要通过<code>hexo clean</code>清理一下，然后通过<code>hexo g</code>重新生成，最后也不要忘了通过<code>hexo s</code>重新启动Hexo。</b></p><p>这个时候你的 hexo 就已经搭建好了<br>快去试一下吧<br>使用浏览器访问 localhost:4000 就可以访问了</p><h2 id="3、部署"><a href="#3、部署" class="headerlink" title="3、部署"></a>3、部署</h2><p><span style='color:red'>        有了博客的你一定想部署到浏览器上去吧如果想就和我一起来操作吧，如果只是试一下就可以忽略了</span></p><h3 id="1-生成github-io仓库"><a href="#1-生成github-io仓库" class="headerlink" title="1. 生成github.io仓库"></a>1. 生成github.io仓库</h3><p>首先注册并登录<a href="https://github.com/" target="_blank" rel="noopener">GitHub</a>，创建新public仓库，仓库名称<strong>一定要是</strong>：<br><code>YourGitHubName.github.io</code>（YourGitHubName是<strong>你的</strong>GitHub昵称，<strong>大小写敏感！</strong>）</p><h3 id="2-本地安装Hexo的git部署插件"><a href="#2-本地安装Hexo的git部署插件" class="headerlink" title="2. 本地安装Hexo的git部署插件"></a>2. 本地安装Hexo的git部署插件</h3><p>在Hexo的目录下，输入<code>npm install --save hexo-deployer-git</code>，会报一个peerDependencies WARNING，可以忽略。</p><h3 id="3-本地修改-config-yaml文件"><a href="#3-本地修改-config-yaml文件" class="headerlink" title="3. 本地修改_config.yaml文件"></a>3. 本地修改_config.yaml文件</h3><p>在Hexo目录下，找到_config.yaml文件，在#Deployment做如下修改：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"># Deployment</span><br><span class="line">## Docs: https:&#x2F;&#x2F;hexo.io&#x2F;docs&#x2F;deployment.html</span><br><span class="line">deploy:</span><br><span class="line">  type: git</span><br><span class="line">  repo: https:&#x2F;&#x2F;github.com&#x2F;DragonBaby308&#x2F;DragonBaby308.github.io.git        #你的github.io的网址</span><br><span class="line">  branch: master                                                            #“type:”、“repo:”和“branch:”后都要带一个空格</span><br></pre></td></tr></table></figure><h3 id="4-部署"><a href="#4-部署" class="headerlink" title="4. 部署"></a>4. 部署</h3><p><code>hexo d</code><br>部署成功后，浏览器输入<code>YourGitHubName.github.io</code>即可访问，其中YourGitHubName是<strong>你的</strong>GitHub昵称，且<strong>大小写敏感</strong></p><h3 id="5-写文章-amp-发布"><a href="#5-写文章-amp-发布" class="headerlink" title="5. 写文章 &amp; 发布"></a>5. 写文章 &amp; 发布</h3><p>和本地一致，都是<code>hexo new &quot;yourArticle&quot;</code>后<code>hexo clean &amp;&amp; hexo d - g</code>，不再赘述。</p><p><strong>—🐖—🐖—🐖—🐖—🐖—🐖—🐖—</strong></p><p>​    然后你的就发布到了 github 上去了，可以通过<br><a href="https://YourGitHubName.github.io" target="_blank" rel="noopener">https://YourGitHubName.github.io</a><br>就可以访问了</p><h2 id="4、总结"><a href="#4、总结" class="headerlink" title="4、总结"></a>4、总结</h2><p>​    期间或许会有很多问题，会遗漏什么<br>但是呢，大不了可有删除了重新再来一此呢，总会成功的<br>而且这个框架使用的人还是挺多的，<br>一些问题网上会有解决办法的</p><p><strong>让我们认识一下 hexo 的全局配置– _config.yaml</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line"># Site</span><br><span class="line"># 站点标题</span><br><span class="line">title: DragonBaby308&#39;s Blog</span><br><span class="line"># 站点副标题</span><br><span class="line">subtitle: Fighting for BAT!</span><br><span class="line"># 站点描述</span><br><span class="line">description: 记住迄今为止每一次失败时有心无力的感受，“为了更美好的明天而战”。</span><br><span class="line"># 作者</span><br><span class="line">author: DragonBaby308</span><br><span class="line"># 语言——  请注意，官方语言包不再支持简体中文zh-Hans，而是统一采用了zh-CN</span><br><span class="line">language: zh-CN</span><br><span class="line"># 时区——默认是本地时区</span><br><span class="line">timezone:</span><br><span class="line"></span><br><span class="line"># URL</span><br><span class="line"># 站点地址</span><br><span class="line">url: http:&#x2F;&#x2F;106.14.153.30</span><br><span class="line"># 站点root，如果网站存在子目录中，url设置为&#39;http:&#x2F;&#x2F;yoursite.com&#x2F;child&#39;，root设置为&#39;&#x2F;child&#x2F;&#39;</span><br><span class="line">root: &#x2F;</span><br><span class="line"># 生成固定链接的格式</span><br><span class="line">permalink: :title&#x2F;</span><br><span class="line">permalink_defaults:</span><br><span class="line"></span><br><span class="line"># Pagination</span><br><span class="line"># 每页文章数——关闭分页：0</span><br><span class="line">per_page: 10</span><br><span class="line"></span><br><span class="line"># Extensions</span><br><span class="line"># 主题</span><br><span class="line">theme: next</span><br><span class="line"></span><br><span class="line"># Deployment</span><br><span class="line"># 部署配置</span><br><span class="line">deploy:</span><br><span class="line">  type: git</span><br><span class="line">  repo: git@106.14.153.30:&#x2F;usr&#x2F;DragonBaby308&#x2F;repo&#x2F;blog.git</span><br><span class="line">  branch: master</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;搭建hexo博客&quot;&gt;&lt;a href=&quot;#搭建hexo博客&quot; class=&quot;headerlink&quot; title=&quot;搭建hexo博客&quot;&gt;&lt;/a&gt;搭建hexo博客&lt;/h1&gt;
    
    </summary>
    
    
    
  </entry>
  
  <entry>
    <title>CSS整体梳理</title>
    <link href="http://yoursite.com/2020/05/12/CSS%E6%95%B4%E4%BD%93%E6%A2%B3%E7%90%86/"/>
    <id>http://yoursite.com/2020/05/12/CSS%E6%95%B4%E4%BD%93%E6%A2%B3%E7%90%86/</id>
    <published>2020-05-12T00:44:18.760Z</published>
    <updated>2020-05-12T06:56:32.273Z</updated>
    
    <content type="html"><![CDATA[<h1 id="css整体梳理"><a href="#css整体梳理" class="headerlink" title="css整体梳理"></a>css整体梳理</h1><a id="more"></a><h3 id="一、单位和样式表"><a href="#一、单位和样式表" class="headerlink" title="一、单位和样式表"></a>一、单位和样式表</h3><h5 id="1-单位"><a href="#1-单位" class="headerlink" title="1.单位"></a>1.单位</h5><p>①px 像素         浏览器能识别的最小单位  </p><p>②% 百分比       基于父级</p><p>③em                 基于自身的font-size，自身没有就会继承父级的font-size</p><p>④rem                基于html的font-size，整个页面的1rem的值是确定的</p><p>⑤vw                   基于移动端开发，CSS3新增的单位，将可视窗口的宽度分为100等份   1vw=窗口宽度/100</p><p>⑥vh                     ……………………………………………………………………….高……………………..   1vh = ………………….</p><h5 id="2-样式表"><a href="#2-样式表" class="headerlink" title="2.样式表"></a>2.样式表</h5><p>①行内样式         不符合结构表现相分离的原则，尽量不用，优先级最高</p><p>②内部样式表     写在style的标签内，style放在head内，优先级第二</p><p>③外部样式表     写在.css文件内，在html用link标签引入 ，href后接路径，优先级第三，写项目都用外部样式表</p><h3 id="二、选择器-–-找标签"><a href="#二、选择器-–-找标签" class="headerlink" title="二、选择器  – 找标签"></a>二、选择器  – 找标签</h3><h5 id="1-必须掌握的选择器"><a href="#1-必须掌握的选择器" class="headerlink" title="1.必须掌握的选择器"></a>1.必须掌握的选择器</h5><p>①通配*</p><p>② 标签   类    id</p><p>③并集   后代   子   兄弟</p><p>④属性    属性=值</p><p>⑤伪类   </p><p>：hover      </p><p>：focus</p><p>：first-child</p><p>：before</p><p>：after</p><p>：first-of-type</p><p>：last-of-type</p><p>：nth-child（数字）</p><p>：empty</p><p>：disabled</p><p>：checked</p><p>：selection  </p><p>：required</p><p>：valid</p><p>：invalid</p><h5 id="2-选择器的优先级"><a href="#2-选择器的优先级" class="headerlink" title="2.选择器的优先级"></a>2.选择器的优先级</h5><p>针对同一个标签上有多个选择器设置样式，针对同样的样式声明，谁的优先级更高就用哪一个</p><p>选择器分值计算  </p><p>标签 1分    类名 10   id 100分   行内1000   ！important是1000000分  </p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">例子color:green!important;</span><br></pre></td></tr></table></figure><h3 id="三、字体样式"><a href="#三、字体样式" class="headerlink" title="三、字体样式"></a>三、字体样式</h3><h5 id="（一）分样式："><a href="#（一）分样式：" class="headerlink" title="（一）分样式："></a>（一）分样式：</h5><p>1.font-family:”宋体”;    字的类型     唯一值可以是汉字的，且值可以写多个</p><p>2.font-weight：bold；字的粗细     取值 bold  bolder   100-900</p><p>3.font-size：30px;       字的大小      取值是长度单位值    默认16px</p><p>4.font-style：italic；   字的风格      取值italic表示斜体</p><h5 id="（二）复合样式"><a href="#（二）复合样式" class="headerlink" title="（二）复合样式"></a>（二）复合样式</h5><p>font：风 粗 大 类；  注意顺序，还有大类必须写</p><h3 id="四、文本样式"><a href="#四、文本样式" class="headerlink" title="四、文本样式"></a>四、文本样式</h3><h5 id="（一）颜色"><a href="#（一）颜色" class="headerlink" title="（一）颜色"></a>（一）颜色</h5><p>color：取值</p><p>①英文颜色  如red</p><p>②十六进制的值： 如#abcdef</p><p>③三原色值rgb()：  rgb（231，39，145）</p><p>④色调、饱和度、亮度hsl：hsl(218,45,34)</p><h5 id="二-对齐方式"><a href="#二-对齐方式" class="headerlink" title="(二) 对齐方式"></a>(二) 对齐方式</h5><h5 id="1-水平方向："><a href="#1-水平方向：" class="headerlink" title="1.水平方向："></a>1.水平方向：</h5><p>text-align：取值  left（默认）   right     center</p><h5 id="2-垂直方向："><a href="#2-垂直方向：" class="headerlink" title="2.垂直方向："></a>2.垂直方向：</h5><p>①line-height：取值  一行就和高一样  多行就用高/行数   还可用于调整行距</p><p>②vertical-align: 取值   top（默认） middle 居中    bottom居下</p><h5 id="3-首行缩进"><a href="#3-首行缩进" class="headerlink" title="3.首行缩进"></a>3.首行缩进</h5><p>text-indent:  取值是长度值   只针对第一行   如果要都缩进就用padding值处理</p><h5 id="（三）文本装饰"><a href="#（三）文本装饰" class="headerlink" title="（三）文本装饰"></a>（三）文本装饰</h5><p>text-decoration：取值</p><p>①underline  下划线</p><p>②line-through 删除线</p><p>③none    去掉装饰线   一般用于去除a的下划线</p><h3 id="五、背景"><a href="#五、背景" class="headerlink" title="五、背景"></a>五、背景</h3><h4 id="（一）分样式"><a href="#（一）分样式" class="headerlink" title="（一）分样式"></a>（一）分样式</h4><h5 id="1-背景色-background-color：颜色取值"><a href="#1-背景色-background-color：颜色取值" class="headerlink" title="1. 背景色 background-color：颜色取值"></a>1. 背景色 background-color：颜色取值</h5><h5 id="2-背景图片路径-background-image：url-路径"><a href="#2-背景图片路径-background-image：url-路径" class="headerlink" title="2.背景图片路径 background-image：url(路径)"></a>2.背景图片路径 background-image：url(路径)</h5><h5 id="3-是否重复-background-repeat：no-repeat-repeat-x-repeat-y"><a href="#3-是否重复-background-repeat：no-repeat-repeat-x-repeat-y" class="headerlink" title="3.是否重复   background-repeat：no-repeat    repeat-x   repeat-y"></a>3.是否重复   background-repeat：no-repeat    repeat-x   repeat-y</h5><h5 id="4-定位-background-position-x轴-y轴-注意顺序"><a href="#4-定位-background-position-x轴-y轴-注意顺序" class="headerlink" title="4.定位   background-position: x轴  y轴    注意顺序"></a>4.定位   background-position: x轴  y轴    注意顺序</h5><h4 id="（二）复合样式-1"><a href="#（二）复合样式-1" class="headerlink" title="（二）复合样式"></a>（二）复合样式</h4><p>background：无顺序</p><h4 id="（三）注意要点"><a href="#（三）注意要点" class="headerlink" title="（三）注意要点"></a>（三）注意要点</h4><ol><li>路径要正确</li><li>保证引背景图的标签可以设置宽高</li><li>注意定位，会从大图中引入小图</li></ol><h3 id="六、行块-display–-标签的展示方式"><a href="#六、行块-display–-标签的展示方式" class="headerlink" title="六、行块  display– 标签的展示方式"></a>六、行块  display– 标签的展示方式</h3><h4 id="display取值"><a href="#display取值" class="headerlink" title="display取值"></a>display取值</h4><p>1.block   块级   显示</p><p>2.inline-block   行块</p><p>3.inline   行内</p><p>4.table    表格</p><p>5.flex      弹性盒子</p><p>6.none    隐藏   且不占位置</p><h3 id="七、布局"><a href="#七、布局" class="headerlink" title="七、布局"></a>七、布局</h3><h5 id="（一）整体布局思想"><a href="#（一）整体布局思想" class="headerlink" title="（一）整体布局思想"></a>（一）整体布局思想</h5><p>画布局图，一层一层的实现</p><h5 id="（二）盒模型"><a href="#（二）盒模型" class="headerlink" title="（二）盒模型"></a>（二）盒模型</h5><p>width    height    margin    border     padding      box-sizing</p><h5 id="（三）浮动"><a href="#（三）浮动" class="headerlink" title="（三）浮动"></a>（三）浮动</h5><p>float：left/right/none</p><p>浮动结束要清除浮动：</p><p>1.给父级设置定高</p><p>2.在浮动结束的位置加 <div class="clear"></div>  ,在样式内加 .clear{clear:both;}</p><p>3.父级无定高 ，加overflow:hidden</p><h5 id="四-定位"><a href="#四-定位" class="headerlink" title="(四)定位"></a>(四)定位</h5><p>position：取值</p><p>1.relative   相对定位    参照自身原来的位置     原位置保留     不脱离标准文档流</p><p>2.fixed        固定定位    参照浏览器                     原位置消失     脱离标准文档流</p><p>3.absolute  固定定位     子绝父相，没找到就参照浏览器       原位置消失     脱离标准文档流</p><p>注意：定位不乱用</p><h1 id="八、CSS-hack"><a href="#八、CSS-hack" class="headerlink" title="八、CSS hack"></a>八、CSS hack</h1><h3 id="（一）什么是CSS-hack"><a href="#（一）什么是CSS-hack" class="headerlink" title="（一）什么是CSS hack"></a>（一）什么是CSS hack</h3><p>由于不同厂商的流览器或某浏览器的不同版本（如IE6-IE11,Firefox/Safari/Opera/Chrome等），对CSS的支持、解析不一样，导致在不同浏览器的环境中呈现出不一致的页面展现效果。这时，我们为了获得统一的页面效果，就需要针对不同的浏览器或不同版本写特定的CSS样式，我们把这个针对不同的浏览器/不同版本写相应的CSS code的过程，叫做CSS hack!</p><h3 id="（二）CSS-hack的原理"><a href="#（二）CSS-hack的原理" class="headerlink" title="（二）CSS hack的原理"></a>（二）CSS hack的原理</h3><p>由于不同的浏览器和浏览器各版本对CSS的支持及解析结果不一样，以及CSS优先级对浏览器展现效果的影响，我们可以据此针对不同的浏览器情景来应用不同的CSS。</p><h3 id="（三）CSS-hack分类"><a href="#（三）CSS-hack分类" class="headerlink" title="（三）CSS hack分类"></a>（三）CSS hack分类</h3><p>CSS Hack大致有3种表现形式，CSS属性前缀法、选择器前缀法以及IE条件注释法（即HTML头部引用if IE）Hack，实际项目中CSS Hack大部分是针对IE浏览器不同版本之间的表现差异而引入的。</p><ul><li>属性前缀法(即类内部Hack)：例如 IE6能识别下划线”<em>“和星号” * “，IE7能识别星号” * “，但不能识别下划线”</em>“，IE6~IE10都认识”\9”，但firefox前述三个都不能认识。</li><li>选择器前缀法(即选择器Hack)：例如 IE6能识别<em>html .class{}，IE7能识别</em>+html .class{}或者*:first-child+html .class{}。</li><li>IE条件注释法(即HTML条件注释Hack)：针对所有IE(注：IE10+已经不再支持条件注释)： <!--[if IE]>IE浏览器显示的内容 <![endif]-->，针对IE6及以下版本： <!--[if lt IE 6]>只在IE6-显示的内容 <![endif]-->。这类Hack不仅对CSS生效，对写在判断语句里面的所有代码都会生效。</li></ul><p>　　</p><p>CSS hack书写顺序，一般是将适用范围广、被识别能力强的CSS定义在前面。</p><h3 id="1-CSS-hack方式一：条件注释法"><a href="#1-CSS-hack方式一：条件注释法" class="headerlink" title="1. CSS hack方式一：条件注释法"></a>1. CSS hack方式一：条件注释法</h3><p>　</p><p>这种方式是IE浏览器专有的Hack方式，微软官方推荐使用的hack方式。举例如下</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line">只在IE下生效</span><br><span class="line">&lt;!--[if IE]&gt;</span><br><span class="line">这段文字只在IE浏览器显示</span><br><span class="line">&lt;![endif]--&gt;</span><br><span class="line"></span><br><span class="line">只在IE6下生效</span><br><span class="line">&lt;!--[if IE 6]&gt;</span><br><span class="line">这段文字只在IE6浏览器显示</span><br><span class="line">&lt;![endif]--&gt;</span><br><span class="line"></span><br><span class="line">只在IE6以上版本生效</span><br><span class="line">&lt;!--[if gte IE 6]&gt;</span><br><span class="line">这段文字只在IE6以上(包括)版本IE浏览器显示</span><br><span class="line">&lt;![endif]--&gt;</span><br><span class="line"></span><br><span class="line">只在IE8上不生效</span><br><span class="line">&lt;!--[if ! IE 8]&gt;</span><br><span class="line">这段文字在非IE8浏览器显示</span><br><span class="line">&lt;![endif]--&gt;</span><br><span class="line"></span><br><span class="line">非IE浏览器生效</span><br><span class="line">&lt;!--[if !IE]&gt;</span><br><span class="line">这段文字只在非IE浏览器显示</span><br><span class="line">&lt;![endif]--&gt;</span><br></pre></td></tr></table></figure><h3 id="2-CSS-hack方式二：类内属性前缀法"><a href="#2-CSS-hack方式二：类内属性前缀法" class="headerlink" title="2. CSS hack方式二：类内属性前缀法"></a>2. CSS hack方式二：类内属性前缀法</h3><p>属性前缀法是在CSS样式属性名前加上一些只有特定浏览器才能识别的hack前缀，以达到预期的页面展现效果。</p><h3 id="3-CSS-hack方式三：选择器前缀法"><a href="#3-CSS-hack方式三：选择器前缀法" class="headerlink" title="3. CSS hack方式三：选择器前缀法"></a>3. CSS hack方式三：选择器前缀法</h3><p>选择器前缀法是针对一些页面表现不一致或者需要特殊对待的浏览器，在CSS选择器前加上一些只有某些特定浏览器才能识别的前缀进行hack。</p><p>目前最常见的是</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">*html *前缀只对IE6生效</span><br><span class="line">*+html *+前缀只对IE7生效</span><br><span class="line">@media screen\9&#123;...&#125;只对IE6&#x2F;7生效</span><br><span class="line">@media \0screen &#123;body &#123; background: red; &#125;&#125;只对IE8有效</span><br><span class="line">@media \0screen\,screen\9&#123;body &#123; background: blue; &#125;&#125;只对IE6&#x2F;7&#x2F;8有效</span><br><span class="line">@media screen\0 &#123;body &#123; background: green; &#125;&#125; 只对IE8&#x2F;9&#x2F;10有效</span><br><span class="line">@media screen and (min-width:0\0) &#123;body &#123; background: gray; &#125;&#125; 只对IE9&#x2F;10有效</span><br><span class="line">@media screen and (-ms-high-contrast: active), (-ms-high-contrast: none) &#123;body &#123; background: orange; &#125;&#125; 只对IE10有效</span><br><span class="line">IE ： -ms-  火狐：-moz-  苹果和谷歌：-webkit-  opera：-o-</span><br></pre></td></tr></table></figure><h3 id="（四）CSS-hack利弊"><a href="#（四）CSS-hack利弊" class="headerlink" title="（四）CSS hack利弊"></a>（四）CSS hack利弊</h3><p>一般情况下，我们尽量避免使用CSS hack，但是有些情况为了顾及用户体验实现向下兼容，不得已才使用hack。使用hack虽然对页面表现的一致性有好处，但过多的滥用会造成html文档混乱不堪，增加管理和维护的负担。应尽量少用、慎用hack，促使浏览器厂商的标准越来越趋于统一，顺利过渡到标准浏览器的主流时代。抛弃那些陈旧的IE hack，必将减轻我们编码的复杂度，少做无用功。</p>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;css整体梳理&quot;&gt;&lt;a href=&quot;#css整体梳理&quot; class=&quot;headerlink&quot; title=&quot;css整体梳理&quot;&gt;&lt;/a&gt;css整体梳理&lt;/h1&gt;
    
    </summary>
    
    
    
  </entry>
  
  <entry>
    <title>HTML的整体梳理</title>
    <link href="http://yoursite.com/2020/05/11/HTML%E7%9A%84%E6%95%B4%E4%BD%93%E6%A2%B3%E7%90%86/"/>
    <id>http://yoursite.com/2020/05/11/HTML%E7%9A%84%E6%95%B4%E4%BD%93%E6%A2%B3%E7%90%86/</id>
    <published>2020-05-11T12:43:43.407Z</published>
    <updated>2020-05-12T06:56:32.277Z</updated>
    
    <content type="html"><![CDATA[<h1 id="HTML的整体梳理"><a href="#HTML的整体梳理" class="headerlink" title="HTML的整体梳理"></a>HTML的整体梳理</h1><a id="more"></a><h3 id="二、页面基本结构"><a href="#二、页面基本结构" class="headerlink" title="二、页面基本结构"></a>二、页面基本结构</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">&lt;!DOCTYPE html&gt;</span><br><span class="line">&lt;html&gt;</span><br><span class="line">    &lt;head&gt;</span><br><span class="line">        &lt;title&gt;&lt;&#x2F;title&gt;   页面标题</span><br><span class="line">        &lt;meta charset&#x3D;&quot;utf-8&quot;&gt;   字符编码集  解决乱码问题 </span><br><span class="line">        &lt;meta http-equiv&#x3D;&quot;Content-Type&quot; content&#x3D;&quot;text&#x2F;html; charset&#x3D;UTF-8&quot;&gt;  等同上一个</span><br><span class="line">        &lt;meta name&#x3D;&quot;viewport&quot; content&#x3D;&quot;width&#x3D;device-width, initial-scale&#x3D;1.0&quot;&gt;  移动端</span><br><span class="line">        &lt;meta name&#x3D;&quot;keywords&quot; content&#x3D;&quot;HTML &lt;iframe&gt; 标签&quot;&gt;</span><br><span class="line">        &lt;meta name&#x3D;&quot;description&quot; content&#x3D;&quot;HTML &amp;lt;iframe&amp;gt; 标签&quot;&gt;</span><br><span class="line">    &lt;&#x2F;head&gt;</span><br><span class="line">    &lt;body&gt;</span><br><span class="line"></span><br><span class="line">    &lt;&#x2F;body&gt;</span><br><span class="line">&lt;&#x2F;html&gt;</span><br></pre></td></tr></table></figure><p>重点记忆：DOCTYPE      charset=”utf-8”     </p><p> viewport 视口   device设备   initial-scale初始缩放</p><p>keywords关键字     description描述</p><h3 id="三、规范"><a href="#三、规范" class="headerlink" title="三、规范"></a>三、规范</h3><p>标签，属性都小写，属性值加引号，标签严格嵌套，关闭</p><h3 id="四、基本标签"><a href="#四、基本标签" class="headerlink" title="四、基本标签"></a>四、基本标签</h3><table><thead><tr><th>标题标签 <h1>~<h6></th></tr></thead><tbody><tr><td>段落标签 <p></p></td></tr><tr><td>换行标签 <br/></td></tr><tr><td>主题结束标签 <hr></td></tr><tr><td>斜体 <em></em></td></tr><tr><td>表示重要性<strong></strong></td></tr><tr><td>图像标签 <img/>  重点是  路径 宽 高</td></tr><tr><td>超链接标签   <a></a>  重点是  路径 target</td></tr><tr><td>无意义标签（用于页面内层的布局 外层用H5的结构标签做）     <div></div>     <span></span></td></tr><tr><td>内联框架标签。用来在当前 HTML 文档中嵌入另一个文档<iframe></iframe></td></tr></tbody></table><p> 重点掌握：</p><p>1.相对路径的写法    img的src，a的href，iframe的src 后面跟的都是路径</p><p>2.frameborder 内联框架（在本文档内引入别的文档）的边框线</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;iframe src&#x3D;&quot;header.html&quot; height&#x3D;&quot;155px&quot; width&#x3D;&quot;960px&quot; frameborder&#x3D;&quot;0&quot;&gt;&lt;&#x2F;iframe&gt;</span><br></pre></td></tr></table></figure><p>3.超链接的使用</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br></pre></td><td class="code"><pre><span class="line">&lt;!DOCTYPE html&gt;</span><br><span class="line">&lt;html&gt;</span><br><span class="line">&lt;head&gt;</span><br><span class="line">&lt;title&gt;&lt;&#x2F;title&gt;</span><br><span class="line">&lt;meta charset&#x3D;&quot;utf-8&quot;&gt;</span><br><span class="line">&lt;meta name&#x3D;&quot;viewport&quot; content&#x3D;&quot;&quot;&gt;</span><br><span class="line">&lt;style type&#x3D;&quot;text&#x2F;css&quot;&gt;</span><br><span class="line">p&#123;</span><br><span class="line">width:200px;</span><br><span class="line">height: 300px;</span><br><span class="line">margin-top:1000px;</span><br><span class="line">background: red;</span><br><span class="line">&#125;</span><br><span class="line">&lt;&#x2F;style&gt;</span><br><span class="line">&lt;&#x2F;head&gt;</span><br><span class="line">&lt;body&gt;</span><br><span class="line">&lt;a href&#x3D;&quot;https:&#x2F;&#x2F;www.runoob.com&#x2F;try&#x2F;try.php?filename&#x3D;tryhtml_iframe&quot;&gt;</span><br><span class="line">绝对路径的跳转</span><br><span class="line">&lt;&#x2F;a&gt;</span><br><span class="line"></span><br><span class="line">&lt;hr&gt;</span><br><span class="line"></span><br><span class="line">&lt;a href&#x3D;&quot;cart.html&quot;&gt;</span><br><span class="line">相对路径的跳转</span><br><span class="line">&lt;&#x2F;a&gt;</span><br><span class="line">&lt;hr&gt;</span><br><span class="line">&lt;a href&#x3D;&quot;#see&quot;&gt;</span><br><span class="line">锚链接--跳转到本页指定位置  点我看到p</span><br><span class="line">&lt;&#x2F;a&gt;</span><br><span class="line">&lt;hr&gt;</span><br><span class="line"></span><br><span class="line">&lt;a href&#x3D;&quot;cart.html#cartDiv&quot;&gt;</span><br><span class="line">锚链接--跳转到指定页面的指定位置  点我看到购物车页面的div</span><br><span class="line">&lt;&#x2F;a&gt;</span><br><span class="line">&lt;hr&gt;</span><br><span class="line">&lt;a href&#x3D;&quot;mailto:&#x2F;&#x2F;534589850@qq.com &quot;&gt;</span><br><span class="line">功能性的：给指定的邮箱发消息</span><br><span class="line">&lt;&#x2F;a&gt;</span><br><span class="line"></span><br><span class="line">&lt;a href&#x3D;&quot;tencent:&#x2F;&#x2F;message&#x2F;?uin&#x3D;534589850&quot;&gt;</span><br><span class="line">给指定QQ发消息</span><br><span class="line">&lt;&#x2F;a&gt;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&lt;p id&#x3D;&quot;see&quot;&gt;</span><br><span class="line">我是p标签里的内容</span><br><span class="line">&lt;&#x2F;p&gt;</span><br><span class="line">&lt;&#x2F;body&gt;</span><br><span class="line">&lt;&#x2F;html&gt;</span><br></pre></td></tr></table></figure><h3 id="五、表格"><a href="#五、表格" class="headerlink" title="五、表格"></a>五、表格</h3><h5 id="1-table-–-表格-块级"><a href="#1-table-–-表格-块级" class="headerlink" title="1.  table  – 表格   块级"></a>1.  table  – 表格   块级</h5><h5 id="2-thead-表格头部-tbody-主题-tfoot-表格尾部"><a href="#2-thead-表格头部-tbody-主题-tfoot-表格尾部" class="headerlink" title="2.thead  表格头部         tbody 主题          tfoot 表格尾部"></a>2.thead  表格头部         tbody 主题          tfoot 表格尾部</h5><p>可以写也可以省略，tbody如果省略，浏览会自动生成一个，作为table的子级，所有的tr都在tbody内，thead和tfoot不写，浏览器不自动生成</p><h5 id="3-caption-表格标题"><a href="#3-caption-表格标题" class="headerlink" title="3.caption   表格标题"></a>3.caption   表格标题</h5><p>是table的子级，默认始终水平居中，外卖无框线</p><h5 id="4-tr行-td普通单元格-th-表头单元格-默认加粗和水平居中"><a href="#4-tr行-td普通单元格-th-表头单元格-默认加粗和水平居中" class="headerlink" title="4.tr行  td普通单元格   th 表头单元格  默认加粗和水平居中"></a>4.tr行  td普通单元格   th 表头单元格  默认加粗和水平居中</h5><h5 id="5-属性："><a href="#5-属性：" class="headerlink" title="5.属性："></a>5.属性：</h5><p> ①在td和th内可以添加   colspan=“列数”   跨列   rowspan=“行数”  跨行</p><p>②在table内添加   border=“数字”   加所有边框     也可以给td加border的样式</p><p>cellspacing=“0”  把单元格之间的空白合并，效果框线合并，H5已经废除，用css的 border-collapse：collapse；来代替，设给table的样式里</p><p>③在table内添加cellpadding=“10px”   表示单元格里的内容到边框的距离，H5已经废除，可以用css的padding来代替，设给td或th的样式里。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br></pre></td><td class="code"><pre><span class="line">&lt;!DOCTYPE html&gt;</span><br><span class="line">&lt;html&gt;</span><br><span class="line">&lt;head&gt;</span><br><span class="line">&lt;title&gt;&lt;&#x2F;title&gt;</span><br><span class="line">&lt;meta charset&#x3D;&quot;utf-8&quot;&gt;</span><br><span class="line">&lt;meta name&#x3D;&quot;viewport&quot; content&#x3D;&quot;&quot;&gt;</span><br><span class="line">&lt;style type&#x3D;&quot;text&#x2F;css&quot;&gt;</span><br><span class="line"></span><br><span class="line">.tab1&#123;</span><br><span class="line">width:500px;</span><br><span class="line">height: 200px;</span><br><span class="line">margin:40px auto;</span><br><span class="line">border-collapse: collapse;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">.tab1 td,.tab1 th&#123;</span><br><span class="line">border:3px solid red;</span><br><span class="line">padding:20px;</span><br><span class="line">&#125;</span><br><span class="line">&lt;&#x2F;style&gt;</span><br><span class="line">&lt;&#x2F;head&gt;</span><br><span class="line">&lt;body&gt;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&lt;!-- 表格 --&gt;</span><br><span class="line">&lt;table  class&#x3D;&quot;tab1&quot; &gt;</span><br><span class="line">&lt;!-- &lt;thead&gt; --&gt;</span><br><span class="line"></span><br><span class="line">&lt;caption&gt;初级班成绩表&lt;&#x2F;caption&gt;</span><br><span class="line">&lt;tr&gt;</span><br><span class="line">&lt;th&gt;姓名&lt;&#x2F;th&gt;</span><br><span class="line">&lt;th&gt;语文&lt;&#x2F;th&gt;</span><br><span class="line">&lt;th&gt;数学&lt;&#x2F;th&gt;</span><br><span class="line">&lt;&#x2F;tr&gt;</span><br><span class="line">&lt;!-- &lt;&#x2F;thead&gt; --&gt;</span><br><span class="line"></span><br><span class="line">&lt;!-- &lt;tbody&gt; --&gt;</span><br><span class="line">&lt;tr&gt;</span><br><span class="line">&lt;td&gt;</span><br><span class="line">张一</span><br><span class="line">&lt;&#x2F;td&gt;</span><br><span class="line">&lt;td&gt;</span><br><span class="line">90</span><br><span class="line">&lt;&#x2F;td&gt;</span><br><span class="line">&lt;td&gt;</span><br><span class="line">80</span><br><span class="line">&lt;&#x2F;td&gt;</span><br><span class="line">&lt;&#x2F;tr&gt;</span><br><span class="line">&lt;tr&gt;</span><br><span class="line">&lt;td&gt;</span><br><span class="line">张二</span><br><span class="line">&lt;&#x2F;td&gt;</span><br><span class="line">&lt;td&gt;</span><br><span class="line">90</span><br><span class="line">&lt;&#x2F;td&gt;</span><br><span class="line">&lt;td&gt;</span><br><span class="line">80</span><br><span class="line">&lt;&#x2F;td&gt;</span><br><span class="line">&lt;&#x2F;tr&gt;</span><br><span class="line">&lt;tr&gt;</span><br><span class="line">&lt;td&gt;</span><br><span class="line">张三</span><br><span class="line">&lt;&#x2F;td&gt;</span><br><span class="line">&lt;td&gt;</span><br><span class="line">90</span><br><span class="line">&lt;&#x2F;td&gt;</span><br><span class="line">&lt;td&gt;</span><br><span class="line">80</span><br><span class="line">&lt;&#x2F;td&gt;</span><br><span class="line">&lt;&#x2F;tr&gt;</span><br><span class="line">&lt;tr&gt;</span><br><span class="line">&lt;td&gt;</span><br><span class="line">张四</span><br><span class="line">&lt;&#x2F;td&gt;</span><br><span class="line">&lt;td&gt;</span><br><span class="line">90</span><br><span class="line">&lt;&#x2F;td&gt;</span><br><span class="line">&lt;td&gt;</span><br><span class="line">80</span><br><span class="line">&lt;&#x2F;td&gt;</span><br><span class="line">&lt;&#x2F;tr&gt;</span><br><span class="line">&lt;!-- &lt;&#x2F;tbody&gt; --&gt;</span><br><span class="line"></span><br><span class="line">&lt;!-- &lt;tfoot&gt; --&gt;</span><br><span class="line">&lt;tr&gt;</span><br><span class="line">&lt;td colspan&#x3D;&quot;3&quot;&gt;</span><br><span class="line">成绩优异</span><br><span class="line">&lt;&#x2F;td&gt;</span><br><span class="line">&lt;&#x2F;tr&gt;</span><br><span class="line">&lt;!-- &lt;&#x2F;tfoot&gt; --&gt;</span><br><span class="line">&lt;&#x2F;table&gt;</span><br><span class="line">&lt;&#x2F;body&gt;</span><br><span class="line">&lt;&#x2F;html&gt;</span><br></pre></td></tr></table></figure><h3 id="六、表单"><a href="#六、表单" class="headerlink" title="六、表单"></a>六、表单</h3><h5 id="1-定义"><a href="#1-定义" class="headerlink" title="1.定义"></a>1.定义</h5><p>用于收集用户的信息，并将信息数据发送给服务器进行数据分析。是连接前端和后台的桥梁。</p><p>后台靠name名来识别数据。</p><h5 id="2-表单form"><a href="#2-表单form" class="headerlink" title="2.表单form"></a>2.表单form</h5><p>form的基本结构：是双、块级标签，有2个必备属性（method=”get”或”post”,action=”result.html”(发送到服务器））     区别：”get”发送的信息在地址栏有显示，不安全；”post”则不会有显示，很安全。</p><h5 id="3-input类型（1隐2填3选4点-H5-5个新增）"><a href="#3-input类型（1隐2填3选4点-H5-5个新增）" class="headerlink" title="3.input类型（1隐2填3选4点 H5 5个新增）"></a>3.input类型（1隐2填3选4点 H5 5个新增）</h5><p>（1）type类型</p><p>①type=”hidden”（隐藏域）在页面中不可见，但写在代码中，可以提交到后台。</p><p>②text（文本框，placeholder设置提示文字），</p><p>③password（密码框，不展示详细内容），</p><p>④submit（按钮，可以提交，有刷新功能），</p><p>⑤button（普通按钮），，</p><p>⑥radio（name名必须一致），</p><p>⑦reset（清除已填的信息，没有刷新功能），</p><p>⑧file（传输文件），</p><p>⑨image（图片提交按钮，有刷新功能）。     </p><p>⑩checkbox(不写value值）</p><p> （2）size和maxlength是text和password等可输入的input类型的独有属性。size是文本框的可见宽度，不影响文本框中的内容；maxlength是文本框中输入的最大字符数。     </p><p> （3）checked是checkbox和radio的独有属性，表示默认选中。</p><h5 id="4-select（下拉列表）和textarea（多行文本域）"><a href="#4-select（下拉列表）和textarea（多行文本域）" class="headerlink" title="4.select（下拉列表）和textarea（多行文本域）"></a>4.select（下拉列表）和textarea（多行文本域）</h5><p>是区别于input的另外两个标签。Select的子级是option 给它设置selected=”selected” 默认显示的列表项  ，还可以select加size的属性 表示可见的个数</p><h5 id="5-readonly-”readonly”是只读，不可更改；-disabled-”disabled”是禁用，一般流氓软件插件类会默认选用，不可更改。"><a href="#5-readonly-”readonly”是只读，不可更改；-disabled-”disabled”是禁用，一般流氓软件插件类会默认选用，不可更改。" class="headerlink" title="5.readonly=”readonly”是只读，不可更改；     disabled=”disabled”是禁用，一般流氓软件插件类会默认选用，不可更改。"></a>5.readonly=”readonly”是只读，不可更改；     disabled=”disabled”是禁用，一般流氓软件插件类会默认选用，不可更改。</h5><h5 id="6-fieldset（表单域，用于分组展示，默认有边框），利用legend标签可以在文本框上插入文本。"><a href="#6-fieldset（表单域，用于分组展示，默认有边框），利用legend标签可以在文本框上插入文本。" class="headerlink" title="6.fieldset（表单域，用于分组展示，默认有边框），利用legend标签可以在文本框上插入文本。"></a>6.fieldset（表单域，用于分组展示，默认有边框），利用legend标签可以在文本框上插入文本。</h5><h5 id="7-lable-标注）是为了优化用户体验，for的值必须与input中id的值一致。"><a href="#7-lable-标注）是为了优化用户体验，for的值必须与input中id的值一致。" class="headerlink" title="7.lable(标注）是为了优化用户体验，for的值必须与input中id的值一致。"></a>7.lable(标注）是为了优化用户体验，for的值必须与input中id的值一致。</h5><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">&lt;form method&#x3D;&quot;get&quot; action&#x3D;&quot;index.html&quot;&gt;</span><br><span class="line"></span><br><span class="line">&lt;fieldset&gt;</span><br><span class="line">&lt;legend&gt;新用户请注册&lt;&#x2F;legend&gt;</span><br><span class="line">用户名：&lt;input type&#x3D;&quot;text&quot; name&#x3D;&quot;user&quot; &gt; </span><br><span class="line">密码：&lt;input type&#x3D;&quot;password&quot; &gt;</span><br><span class="line">再次输入密码：&lt;input type&#x3D;&quot;password&quot; &gt;</span><br><span class="line">&lt;input type&#x3D;&quot;submit&quot; value&#x3D;&quot;注册&quot;&gt;</span><br><span class="line">&lt;&#x2F;fieldset&gt;</span><br><span class="line"></span><br><span class="line">&lt;fieldset&gt;</span><br><span class="line">&lt;legend&gt;老用户请登陆&lt;&#x2F;legend&gt;</span><br><span class="line">用户名：&lt;input type&#x3D;&quot;text&quot; name&#x3D;&quot;user&quot; &gt; </span><br><span class="line">&lt;label for&#x3D;&quot;pas&quot;&gt;密码：&lt;&#x2F;label&gt;</span><br><span class="line">&lt;input type&#x3D;&quot;password&quot;  id&#x3D;&quot;pas&quot;&gt;</span><br><span class="line"></span><br><span class="line">&lt;input type&#x3D;&quot;submit&quot; value&#x3D;&quot;登录&quot;&gt;</span><br><span class="line">&lt;&#x2F;fieldset&gt;</span><br><span class="line"></span><br><span class="line">&lt;&#x2F;form&gt;</span><br></pre></td></tr></table></figure><h3 id="七、特殊字符"><a href="#七、特殊字符" class="headerlink" title="七、特殊字符"></a>七、特殊字符</h3><p>HTML特殊字符编码对照表  百度</p>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;HTML的整体梳理&quot;&gt;&lt;a href=&quot;#HTML的整体梳理&quot; class=&quot;headerlink&quot; title=&quot;HTML的整体梳理&quot;&gt;&lt;/a&gt;HTML的整体梳理&lt;/h1&gt;
    
    </summary>
    
    
    
  </entry>
  
</feed>
